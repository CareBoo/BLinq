<#@ assembly name="System.Core" #>
<#@ output extension=".gen.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using static ValueFuncs;
using static Utils;
using System.Collections;
using NUnit.Framework;
using Linq = System.Linq.Enumerable;
using Blinq = CareBoo.Blinq.Sequence;

internal partial class MaxMinTest
{
<#
var TYPES = new[] { "int", "float", "double" };
foreach (string TYPE_FULL in TYPES)
{
#>
    internal class Values_<#=TYPE_FULL#>
    {
        public static IEnumerable Values
        {
            get
            {
                yield return new <#=TYPE_FULL#>[0];
                yield return new <#=TYPE_FULL#>[1];
                yield return Linq.ToArray(Linq.Repeat((<#=TYPE_FULL#>)5, 7));
                yield return Linq.ToArray(Linq.Select(Linq.Range(0, 5), (x) => (<#=TYPE_FULL#>)x));
            }
        }
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMax_<#=TYPE_FULL#>(
        [ValueSource(typeof(Values_<#=TYPE_FULL#>), nameof(Values_<#=TYPE_FULL#>.Values))] <#=TYPE_FULL#>[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<<#=TYPE_FULL#>>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMaxSelector_<#=TYPE_FULL#>(
        [ValueSource(typeof(Values_<#=TYPE_FULL#>), nameof(Values_<#=TYPE_FULL#>.Values))] <#=TYPE_FULL#>[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<<#=TYPE_FULL#>>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray, SelectSelf<<#=TYPE_FULL#>>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray, SelectSelf<<#=TYPE_FULL#>>()));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMin_<#=TYPE_FULL#>(
        [ValueSource(typeof(Values_<#=TYPE_FULL#>), nameof(Values_<#=TYPE_FULL#>.Values))] <#=TYPE_FULL#>[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<<#=TYPE_FULL#>>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMinSelector_<#=TYPE_FULL#>(
        [ValueSource(typeof(Values_<#=TYPE_FULL#>), nameof(Values_<#=TYPE_FULL#>.Values))] <#=TYPE_FULL#>[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<<#=TYPE_FULL#>>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray, SelectSelf<<#=TYPE_FULL#>>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray, SelectSelf<<#=TYPE_FULL#>>()));
        srcNativeArray.Dispose();
    }

<#
}
#>
}
