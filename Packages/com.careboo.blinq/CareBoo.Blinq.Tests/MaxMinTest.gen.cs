

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using static ValueFuncs;
using static Utils;
using System.Collections;
using NUnit.Framework;
using Linq = System.Linq.Enumerable;
using Blinq = CareBoo.Blinq.Sequence;

internal partial class MaxMinTest
{

    internal class Values_int
    {
        public static IEnumerable Values
        {
            get
            {
                yield return new int[0];
                yield return new int[1];
                yield return Linq.ToArray(Linq.Repeat((int)5, 7));
                yield return Linq.ToArray(Linq.Select(Linq.Range(0, 5), (x) => (int)x));
            }
        }
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMax_int(
        [ValueSource(typeof(Values_int), nameof(Values_int.Values))] int[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<int>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMaxSelector_int(
        [ValueSource(typeof(Values_int), nameof(Values_int.Values))] int[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<int>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray, SelectSelf<int>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray, SelectSelf<int>()));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMin_int(
        [ValueSource(typeof(Values_int), nameof(Values_int.Values))] int[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<int>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMinSelector_int(
        [ValueSource(typeof(Values_int), nameof(Values_int.Values))] int[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<int>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray, SelectSelf<int>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray, SelectSelf<int>()));
        srcNativeArray.Dispose();
    }


    internal class Values_float
    {
        public static IEnumerable Values
        {
            get
            {
                yield return new float[0];
                yield return new float[1];
                yield return Linq.ToArray(Linq.Repeat((float)5, 7));
                yield return Linq.ToArray(Linq.Select(Linq.Range(0, 5), (x) => (float)x));
            }
        }
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMax_float(
        [ValueSource(typeof(Values_float), nameof(Values_float.Values))] float[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<float>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMaxSelector_float(
        [ValueSource(typeof(Values_float), nameof(Values_float.Values))] float[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<float>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray, SelectSelf<float>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray, SelectSelf<float>()));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMin_float(
        [ValueSource(typeof(Values_float), nameof(Values_float.Values))] float[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<float>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMinSelector_float(
        [ValueSource(typeof(Values_float), nameof(Values_float.Values))] float[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<float>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray, SelectSelf<float>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray, SelectSelf<float>()));
        srcNativeArray.Dispose();
    }


    internal class Values_double
    {
        public static IEnumerable Values
        {
            get
            {
                yield return new double[0];
                yield return new double[1];
                yield return Linq.ToArray(Linq.Repeat((double)5, 7));
                yield return Linq.ToArray(Linq.Select(Linq.Range(0, 5), (x) => (double)x));
            }
        }
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMax_double(
        [ValueSource(typeof(Values_double), nameof(Values_double.Values))] double[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<double>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMaxSelector_double(
        [ValueSource(typeof(Values_double), nameof(Values_double.Values))] double[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<double>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Max(srcNativeArray, SelectSelf<double>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Max(srcNativeArray, SelectSelf<double>()));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMin_double(
        [ValueSource(typeof(Values_double), nameof(Values_double.Values))] double[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<double>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray));
        srcNativeArray.Dispose();
    }

    [Test, Parallelizable]
    public void BlinqShouldEqualLinqNativeArrayMinSelector_double(
        [ValueSource(typeof(Values_double), nameof(Values_double.Values))] double[] sourceArr
        )
    {
        var srcNativeArray = new NativeArray<double>(sourceArr, Allocator.Persistent);
        var expected = ExceptionAndValue(() => Linq.Min(srcNativeArray, SelectSelf<double>().Invoke));
        var actual = ExceptionAndValue(() => Blinq.Min(srcNativeArray, SelectSelf<double>()));
        srcNativeArray.Dispose();
    }


}
