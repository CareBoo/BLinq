<#@ assembly name="System.Core" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {
<#
var TYPES = new[] { "int", "uint", "float", "double" };
foreach (string TYPE_FULL in TYPES)
{
#>
        public static <#=TYPE_FULL#> Max<TSource>(
            this in ValueSequence<<#=TYPE_FULL#>, TSource> source
            )
            where TSource : struct, ISequence<<#=TYPE_FULL#>>
        {
            using (var srcList = source.Execute())
            {
                if (srcList.Length == 0) throw Error.NoElements();

                var max = srcList[0];
                for (var i = 1; i < srcList.Length; i++)
                {
                    var val = srcList[i];
                    if (val > max)
                        max = val;
                }
                return max;
            }
        }

        public static <#=TYPE_FULL#> Min<TSource>(
            this in ValueSequence<<#=TYPE_FULL#>, TSource> source
            )
            where TSource : struct, ISequence<<#=TYPE_FULL#>>
        {
            using (var srcList = source.Execute())
            {
                if (srcList.Length == 0) throw Error.NoElements();

                var min = srcList[0];
                for (var i = 1; i < srcList.Length; i++)
                {
                    var val = srcList[i];
                    if (val < min)
                        min = val;
                }
                return min;
            }
        }

        public static <#=TYPE_FULL#> Max<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            using (var srcList = source.Execute())
            {
                if (srcList.Length == 0) throw Error.NoElements();

                var max = selector.Invoke(srcList[0]);
                for (var i = 1; i < srcList.Length; i++)
                {
                    var val = selector.Invoke(srcList[i]);
                    if (val > max)
                        max = val;
                }
                return max;
            }
        }

        public static <#=TYPE_FULL#> Min<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            using (var srcList = source.Execute())
            {
                if (srcList.Length == 0) throw Error.NoElements();

                var min = selector.Invoke(srcList[0]);
                for (var i = 1; i < srcList.Length; i++)
                {
                    var val = selector.Invoke(srcList[i]);
                    if (val < min)
                        min = val;
                }
                return min;
            }
        }

<#
}
#>
    }
}
