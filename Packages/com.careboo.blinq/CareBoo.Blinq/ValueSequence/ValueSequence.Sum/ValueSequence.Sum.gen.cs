


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {

        public static int Sum<TSource>(
            this in ValueSequence<int, TSource> source
            )
            where TSource : struct, ISequence<int>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int2 Sum<TSource>(
            this in ValueSequence<int2, TSource> source
            )
            where TSource : struct, ISequence<int2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int2x2 Sum<TSource>(
            this in ValueSequence<int2x2, TSource> source
            )
            where TSource : struct, ISequence<int2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int2x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int2x3 Sum<TSource>(
            this in ValueSequence<int2x3, TSource> source
            )
            where TSource : struct, ISequence<int2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int2x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int2x4 Sum<TSource>(
            this in ValueSequence<int2x4, TSource> source
            )
            where TSource : struct, ISequence<int2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int2x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int3 Sum<TSource>(
            this in ValueSequence<int3, TSource> source
            )
            where TSource : struct, ISequence<int3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int3x2 Sum<TSource>(
            this in ValueSequence<int3x2, TSource> source
            )
            where TSource : struct, ISequence<int3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int3x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int3x3 Sum<TSource>(
            this in ValueSequence<int3x3, TSource> source
            )
            where TSource : struct, ISequence<int3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int3x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int3x4 Sum<TSource>(
            this in ValueSequence<int3x4, TSource> source
            )
            where TSource : struct, ISequence<int3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int3x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int4 Sum<TSource>(
            this in ValueSequence<int4, TSource> source
            )
            where TSource : struct, ISequence<int4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int4x2 Sum<TSource>(
            this in ValueSequence<int4x2, TSource> source
            )
            where TSource : struct, ISequence<int4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int4x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int4x3 Sum<TSource>(
            this in ValueSequence<int4x3, TSource> source
            )
            where TSource : struct, ISequence<int4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int4x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static int4x4 Sum<TSource>(
            this in ValueSequence<int4x4, TSource> source
            )
            where TSource : struct, ISequence<int4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static int4x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint Sum<TSource>(
            this in ValueSequence<uint, TSource> source
            )
            where TSource : struct, ISequence<uint>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint2 Sum<TSource>(
            this in ValueSequence<uint2, TSource> source
            )
            where TSource : struct, ISequence<uint2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint2x2 Sum<TSource>(
            this in ValueSequence<uint2x2, TSource> source
            )
            where TSource : struct, ISequence<uint2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint2x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint2x3 Sum<TSource>(
            this in ValueSequence<uint2x3, TSource> source
            )
            where TSource : struct, ISequence<uint2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint2x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint2x4 Sum<TSource>(
            this in ValueSequence<uint2x4, TSource> source
            )
            where TSource : struct, ISequence<uint2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint2x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint3 Sum<TSource>(
            this in ValueSequence<uint3, TSource> source
            )
            where TSource : struct, ISequence<uint3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint3x2 Sum<TSource>(
            this in ValueSequence<uint3x2, TSource> source
            )
            where TSource : struct, ISequence<uint3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint3x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint3x3 Sum<TSource>(
            this in ValueSequence<uint3x3, TSource> source
            )
            where TSource : struct, ISequence<uint3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint3x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint3x4 Sum<TSource>(
            this in ValueSequence<uint3x4, TSource> source
            )
            where TSource : struct, ISequence<uint3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint3x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint4 Sum<TSource>(
            this in ValueSequence<uint4, TSource> source
            )
            where TSource : struct, ISequence<uint4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint4x2 Sum<TSource>(
            this in ValueSequence<uint4x2, TSource> source
            )
            where TSource : struct, ISequence<uint4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint4x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint4x3 Sum<TSource>(
            this in ValueSequence<uint4x3, TSource> source
            )
            where TSource : struct, ISequence<uint4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint4x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static uint4x4 Sum<TSource>(
            this in ValueSequence<uint4x4, TSource> source
            )
            where TSource : struct, ISequence<uint4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static uint4x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float Sum<TSource>(
            this in ValueSequence<float, TSource> source
            )
            where TSource : struct, ISequence<float>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float2 Sum<TSource>(
            this in ValueSequence<float2, TSource> source
            )
            where TSource : struct, ISequence<float2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float2x2 Sum<TSource>(
            this in ValueSequence<float2x2, TSource> source
            )
            where TSource : struct, ISequence<float2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float2x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float2x3 Sum<TSource>(
            this in ValueSequence<float2x3, TSource> source
            )
            where TSource : struct, ISequence<float2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float2x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float2x4 Sum<TSource>(
            this in ValueSequence<float2x4, TSource> source
            )
            where TSource : struct, ISequence<float2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float2x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float3 Sum<TSource>(
            this in ValueSequence<float3, TSource> source
            )
            where TSource : struct, ISequence<float3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float3x2 Sum<TSource>(
            this in ValueSequence<float3x2, TSource> source
            )
            where TSource : struct, ISequence<float3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float3x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float3x3 Sum<TSource>(
            this in ValueSequence<float3x3, TSource> source
            )
            where TSource : struct, ISequence<float3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float3x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float3x4 Sum<TSource>(
            this in ValueSequence<float3x4, TSource> source
            )
            where TSource : struct, ISequence<float3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float3x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float4 Sum<TSource>(
            this in ValueSequence<float4, TSource> source
            )
            where TSource : struct, ISequence<float4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float4x2 Sum<TSource>(
            this in ValueSequence<float4x2, TSource> source
            )
            where TSource : struct, ISequence<float4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float4x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float4x3 Sum<TSource>(
            this in ValueSequence<float4x3, TSource> source
            )
            where TSource : struct, ISequence<float4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float4x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static float4x4 Sum<TSource>(
            this in ValueSequence<float4x4, TSource> source
            )
            where TSource : struct, ISequence<float4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static float4x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double Sum<TSource>(
            this in ValueSequence<double, TSource> source
            )
            where TSource : struct, ISequence<double>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double2 Sum<TSource>(
            this in ValueSequence<double2, TSource> source
            )
            where TSource : struct, ISequence<double2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double2x2 Sum<TSource>(
            this in ValueSequence<double2x2, TSource> source
            )
            where TSource : struct, ISequence<double2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double2x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double2x3 Sum<TSource>(
            this in ValueSequence<double2x3, TSource> source
            )
            where TSource : struct, ISequence<double2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double2x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double2x4 Sum<TSource>(
            this in ValueSequence<double2x4, TSource> source
            )
            where TSource : struct, ISequence<double2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double2x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double3 Sum<TSource>(
            this in ValueSequence<double3, TSource> source
            )
            where TSource : struct, ISequence<double3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double3x2 Sum<TSource>(
            this in ValueSequence<double3x2, TSource> source
            )
            where TSource : struct, ISequence<double3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double3x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double3x3 Sum<TSource>(
            this in ValueSequence<double3x3, TSource> source
            )
            where TSource : struct, ISequence<double3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double3x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double3x4 Sum<TSource>(
            this in ValueSequence<double3x4, TSource> source
            )
            where TSource : struct, ISequence<double3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double3x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double4 Sum<TSource>(
            this in ValueSequence<double4, TSource> source
            )
            where TSource : struct, ISequence<double4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double4x2 Sum<TSource>(
            this in ValueSequence<double4x2, TSource> source
            )
            where TSource : struct, ISequence<double4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double4x2 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double4x3 Sum<TSource>(
            this in ValueSequence<double4x3, TSource> source
            )
            where TSource : struct, ISequence<double4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double4x3 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


        public static double4x4 Sum<TSource>(
            this in ValueSequence<double4x4, TSource> source
            )
            where TSource : struct, ISequence<double4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static double4x4 Sum<T, TSource, TSelector>(
            this in ValueSequence<T, TSource> source,
            in ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            var srcList = source.Execute();
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }


    }
}
