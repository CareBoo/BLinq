


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {

        public static int Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int, TSource, TSourceEnumerator>, int>
            where TSource : struct, ISequence<int, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int>
        {
            public int Invoke(ValueSequence<int, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int, TSource, TSourceEnumerator>, int>.Struct<SequenceSumFunc_int<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int>
        {
            return ValueFunc<ValueSequence<int, TSource, TSourceEnumerator>, int>.New<SequenceSumFunc_int<TSource, TSourceEnumerator>>();
        }

        public static int RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int, TSource, TSourceEnumerator> source,
            ref NativeArray<int> output
            )
            where TSource : struct, ISequence<int, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int>
        {
            public ValueFunc<T, int>.Struct<TSelector> Selector;

            public int Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int>.Struct<SequenceSumFunc_int<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int>
        {
            var func = new SequenceSumFunc_int<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int>.New(func);
        }

        public static int RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int> output,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int2, TSource, TSourceEnumerator>, int2>
            where TSource : struct, ISequence<int2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2>
        {
            public int2 Invoke(ValueSequence<int2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int2, TSource, TSourceEnumerator>, int2>.Struct<SequenceSumFunc_int2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2>
        {
            return ValueFunc<ValueSequence<int2, TSource, TSourceEnumerator>, int2>.New<SequenceSumFunc_int2<TSource, TSourceEnumerator>>();
        }

        public static int2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2, TSource, TSourceEnumerator> source,
            ref NativeArray<int2> output
            )
            where TSource : struct, ISequence<int2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2>
        {
            public ValueFunc<T, int2>.Struct<TSelector> Selector;

            public int2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2>.Struct<SequenceSumFunc_int2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2>
        {
            var func = new SequenceSumFunc_int2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2>.New(func);
        }

        public static int2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int2> output,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int2x2, TSource, TSourceEnumerator>, int2x2>
            where TSource : struct, ISequence<int2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x2>
        {
            public int2x2 Invoke(ValueSequence<int2x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int2x2, TSource, TSourceEnumerator>, int2x2>.Struct<SequenceSumFunc_int2x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x2>
        {
            return ValueFunc<ValueSequence<int2x2, TSource, TSourceEnumerator>, int2x2>.New<SequenceSumFunc_int2x2<TSource, TSourceEnumerator>>();
        }

        public static int2x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x2, TSource, TSourceEnumerator> source,
            ref NativeArray<int2x2> output
            )
            where TSource : struct, ISequence<int2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int2x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            public ValueFunc<T, int2x2>.Struct<TSelector> Selector;

            public int2x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x2>.Struct<SequenceSumFunc_int2x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = new SequenceSumFunc_int2x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x2>.New(func);
        }

        public static int2x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int2x2> output,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int2x3, TSource, TSourceEnumerator>, int2x3>
            where TSource : struct, ISequence<int2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x3>
        {
            public int2x3 Invoke(ValueSequence<int2x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int2x3, TSource, TSourceEnumerator>, int2x3>.Struct<SequenceSumFunc_int2x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x3>
        {
            return ValueFunc<ValueSequence<int2x3, TSource, TSourceEnumerator>, int2x3>.New<SequenceSumFunc_int2x3<TSource, TSourceEnumerator>>();
        }

        public static int2x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x3, TSource, TSourceEnumerator> source,
            ref NativeArray<int2x3> output
            )
            where TSource : struct, ISequence<int2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int2x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            public ValueFunc<T, int2x3>.Struct<TSelector> Selector;

            public int2x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x3>.Struct<SequenceSumFunc_int2x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = new SequenceSumFunc_int2x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x3>.New(func);
        }

        public static int2x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int2x3> output,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int2x4, TSource, TSourceEnumerator>, int2x4>
            where TSource : struct, ISequence<int2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x4>
        {
            public int2x4 Invoke(ValueSequence<int2x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int2x4, TSource, TSourceEnumerator>, int2x4>.Struct<SequenceSumFunc_int2x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x4>
        {
            return ValueFunc<ValueSequence<int2x4, TSource, TSourceEnumerator>, int2x4>.New<SequenceSumFunc_int2x4<TSource, TSourceEnumerator>>();
        }

        public static int2x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x4, TSource, TSourceEnumerator> source,
            ref NativeArray<int2x4> output
            )
            where TSource : struct, ISequence<int2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int2x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int2x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            public ValueFunc<T, int2x4>.Struct<TSelector> Selector;

            public int2x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x4>.Struct<SequenceSumFunc_int2x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = new SequenceSumFunc_int2x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int2x4>.New(func);
        }

        public static int2x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int2x4> output,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int3, TSource, TSourceEnumerator>, int3>
            where TSource : struct, ISequence<int3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3>
        {
            public int3 Invoke(ValueSequence<int3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int3, TSource, TSourceEnumerator>, int3>.Struct<SequenceSumFunc_int3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3>
        {
            return ValueFunc<ValueSequence<int3, TSource, TSourceEnumerator>, int3>.New<SequenceSumFunc_int3<TSource, TSourceEnumerator>>();
        }

        public static int3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3, TSource, TSourceEnumerator> source,
            ref NativeArray<int3> output
            )
            where TSource : struct, ISequence<int3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3>
        {
            public ValueFunc<T, int3>.Struct<TSelector> Selector;

            public int3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3>.Struct<SequenceSumFunc_int3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3>
        {
            var func = new SequenceSumFunc_int3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3>.New(func);
        }

        public static int3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int3> output,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int3x2, TSource, TSourceEnumerator>, int3x2>
            where TSource : struct, ISequence<int3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x2>
        {
            public int3x2 Invoke(ValueSequence<int3x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int3x2, TSource, TSourceEnumerator>, int3x2>.Struct<SequenceSumFunc_int3x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x2>
        {
            return ValueFunc<ValueSequence<int3x2, TSource, TSourceEnumerator>, int3x2>.New<SequenceSumFunc_int3x2<TSource, TSourceEnumerator>>();
        }

        public static int3x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x2, TSource, TSourceEnumerator> source,
            ref NativeArray<int3x2> output
            )
            where TSource : struct, ISequence<int3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int3x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            public ValueFunc<T, int3x2>.Struct<TSelector> Selector;

            public int3x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x2>.Struct<SequenceSumFunc_int3x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = new SequenceSumFunc_int3x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x2>.New(func);
        }

        public static int3x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int3x2> output,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int3x3, TSource, TSourceEnumerator>, int3x3>
            where TSource : struct, ISequence<int3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x3>
        {
            public int3x3 Invoke(ValueSequence<int3x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int3x3, TSource, TSourceEnumerator>, int3x3>.Struct<SequenceSumFunc_int3x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x3>
        {
            return ValueFunc<ValueSequence<int3x3, TSource, TSourceEnumerator>, int3x3>.New<SequenceSumFunc_int3x3<TSource, TSourceEnumerator>>();
        }

        public static int3x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x3, TSource, TSourceEnumerator> source,
            ref NativeArray<int3x3> output
            )
            where TSource : struct, ISequence<int3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int3x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            public ValueFunc<T, int3x3>.Struct<TSelector> Selector;

            public int3x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x3>.Struct<SequenceSumFunc_int3x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = new SequenceSumFunc_int3x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x3>.New(func);
        }

        public static int3x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int3x3> output,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int3x4, TSource, TSourceEnumerator>, int3x4>
            where TSource : struct, ISequence<int3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x4>
        {
            public int3x4 Invoke(ValueSequence<int3x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int3x4, TSource, TSourceEnumerator>, int3x4>.Struct<SequenceSumFunc_int3x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x4>
        {
            return ValueFunc<ValueSequence<int3x4, TSource, TSourceEnumerator>, int3x4>.New<SequenceSumFunc_int3x4<TSource, TSourceEnumerator>>();
        }

        public static int3x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x4, TSource, TSourceEnumerator> source,
            ref NativeArray<int3x4> output
            )
            where TSource : struct, ISequence<int3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int3x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int3x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            public ValueFunc<T, int3x4>.Struct<TSelector> Selector;

            public int3x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x4>.Struct<SequenceSumFunc_int3x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = new SequenceSumFunc_int3x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int3x4>.New(func);
        }

        public static int3x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int3x4> output,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int4, TSource, TSourceEnumerator>, int4>
            where TSource : struct, ISequence<int4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4>
        {
            public int4 Invoke(ValueSequence<int4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int4, TSource, TSourceEnumerator>, int4>.Struct<SequenceSumFunc_int4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4>
        {
            return ValueFunc<ValueSequence<int4, TSource, TSourceEnumerator>, int4>.New<SequenceSumFunc_int4<TSource, TSourceEnumerator>>();
        }

        public static int4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4, TSource, TSourceEnumerator> source,
            ref NativeArray<int4> output
            )
            where TSource : struct, ISequence<int4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4>
        {
            public ValueFunc<T, int4>.Struct<TSelector> Selector;

            public int4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4>.Struct<SequenceSumFunc_int4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4>
        {
            var func = new SequenceSumFunc_int4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4>.New(func);
        }

        public static int4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int4> output,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int4x2, TSource, TSourceEnumerator>, int4x2>
            where TSource : struct, ISequence<int4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x2>
        {
            public int4x2 Invoke(ValueSequence<int4x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int4x2, TSource, TSourceEnumerator>, int4x2>.Struct<SequenceSumFunc_int4x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x2>
        {
            return ValueFunc<ValueSequence<int4x2, TSource, TSourceEnumerator>, int4x2>.New<SequenceSumFunc_int4x2<TSource, TSourceEnumerator>>();
        }

        public static int4x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x2, TSource, TSourceEnumerator> source,
            ref NativeArray<int4x2> output
            )
            where TSource : struct, ISequence<int4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int4x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            public ValueFunc<T, int4x2>.Struct<TSelector> Selector;

            public int4x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x2>.Struct<SequenceSumFunc_int4x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = new SequenceSumFunc_int4x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x2>.New(func);
        }

        public static int4x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int4x2> output,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int4x3, TSource, TSourceEnumerator>, int4x3>
            where TSource : struct, ISequence<int4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x3>
        {
            public int4x3 Invoke(ValueSequence<int4x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int4x3, TSource, TSourceEnumerator>, int4x3>.Struct<SequenceSumFunc_int4x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x3>
        {
            return ValueFunc<ValueSequence<int4x3, TSource, TSourceEnumerator>, int4x3>.New<SequenceSumFunc_int4x3<TSource, TSourceEnumerator>>();
        }

        public static int4x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x3, TSource, TSourceEnumerator> source,
            ref NativeArray<int4x3> output
            )
            where TSource : struct, ISequence<int4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int4x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            public ValueFunc<T, int4x3>.Struct<TSelector> Selector;

            public int4x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x3>.Struct<SequenceSumFunc_int4x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = new SequenceSumFunc_int4x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x3>.New(func);
        }

        public static int4x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int4x3> output,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<int4x4, TSource, TSourceEnumerator>, int4x4>
            where TSource : struct, ISequence<int4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x4>
        {
            public int4x4 Invoke(ValueSequence<int4x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<int4x4, TSource, TSourceEnumerator>, int4x4>.Struct<SequenceSumFunc_int4x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x4>
        {
            return ValueFunc<ValueSequence<int4x4, TSource, TSourceEnumerator>, int4x4>.New<SequenceSumFunc_int4x4<TSource, TSourceEnumerator>>();
        }

        public static int4x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x4, TSource, TSourceEnumerator> source,
            ref NativeArray<int4x4> output
            )
            where TSource : struct, ISequence<int4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<int4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<int4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<int4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static int4x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            int4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_int4x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            public ValueFunc<T, int4x4>.Struct<TSelector> Selector;

            public int4x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x4>.Struct<SequenceSumFunc_int4x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = new SequenceSumFunc_int4x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, int4x4>.New(func);
        }

        public static int4x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<int4x4> output,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint, TSource, TSourceEnumerator>, uint>
            where TSource : struct, ISequence<uint, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint>
        {
            public uint Invoke(ValueSequence<uint, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint, TSource, TSourceEnumerator>, uint>.Struct<SequenceSumFunc_uint<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint>
        {
            return ValueFunc<ValueSequence<uint, TSource, TSourceEnumerator>, uint>.New<SequenceSumFunc_uint<TSource, TSourceEnumerator>>();
        }

        public static uint RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint, TSource, TSourceEnumerator> source,
            ref NativeArray<uint> output
            )
            where TSource : struct, ISequence<uint, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint>
        {
            public ValueFunc<T, uint>.Struct<TSelector> Selector;

            public uint Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint>.Struct<SequenceSumFunc_uint<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint>
        {
            var func = new SequenceSumFunc_uint<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint>.New(func);
        }

        public static uint RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint> output,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint2, TSource, TSourceEnumerator>, uint2>
            where TSource : struct, ISequence<uint2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2>
        {
            public uint2 Invoke(ValueSequence<uint2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint2, TSource, TSourceEnumerator>, uint2>.Struct<SequenceSumFunc_uint2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2>
        {
            return ValueFunc<ValueSequence<uint2, TSource, TSourceEnumerator>, uint2>.New<SequenceSumFunc_uint2<TSource, TSourceEnumerator>>();
        }

        public static uint2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2> output
            )
            where TSource : struct, ISequence<uint2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            public ValueFunc<T, uint2>.Struct<TSelector> Selector;

            public uint2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2>.Struct<SequenceSumFunc_uint2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = new SequenceSumFunc_uint2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2>.New(func);
        }

        public static uint2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2> output,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint2x2, TSource, TSourceEnumerator>, uint2x2>
            where TSource : struct, ISequence<uint2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x2>
        {
            public uint2x2 Invoke(ValueSequence<uint2x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint2x2, TSource, TSourceEnumerator>, uint2x2>.Struct<SequenceSumFunc_uint2x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x2>
        {
            return ValueFunc<ValueSequence<uint2x2, TSource, TSourceEnumerator>, uint2x2>.New<SequenceSumFunc_uint2x2<TSource, TSourceEnumerator>>();
        }

        public static uint2x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x2, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2x2> output
            )
            where TSource : struct, ISequence<uint2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint2x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            public ValueFunc<T, uint2x2>.Struct<TSelector> Selector;

            public uint2x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x2>.Struct<SequenceSumFunc_uint2x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = new SequenceSumFunc_uint2x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x2>.New(func);
        }

        public static uint2x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2x2> output,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint2x3, TSource, TSourceEnumerator>, uint2x3>
            where TSource : struct, ISequence<uint2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x3>
        {
            public uint2x3 Invoke(ValueSequence<uint2x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint2x3, TSource, TSourceEnumerator>, uint2x3>.Struct<SequenceSumFunc_uint2x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x3>
        {
            return ValueFunc<ValueSequence<uint2x3, TSource, TSourceEnumerator>, uint2x3>.New<SequenceSumFunc_uint2x3<TSource, TSourceEnumerator>>();
        }

        public static uint2x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x3, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2x3> output
            )
            where TSource : struct, ISequence<uint2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint2x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            public ValueFunc<T, uint2x3>.Struct<TSelector> Selector;

            public uint2x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x3>.Struct<SequenceSumFunc_uint2x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = new SequenceSumFunc_uint2x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x3>.New(func);
        }

        public static uint2x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2x3> output,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint2x4, TSource, TSourceEnumerator>, uint2x4>
            where TSource : struct, ISequence<uint2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x4>
        {
            public uint2x4 Invoke(ValueSequence<uint2x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint2x4, TSource, TSourceEnumerator>, uint2x4>.Struct<SequenceSumFunc_uint2x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x4>
        {
            return ValueFunc<ValueSequence<uint2x4, TSource, TSourceEnumerator>, uint2x4>.New<SequenceSumFunc_uint2x4<TSource, TSourceEnumerator>>();
        }

        public static uint2x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x4, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2x4> output
            )
            where TSource : struct, ISequence<uint2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint2x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint2x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            public ValueFunc<T, uint2x4>.Struct<TSelector> Selector;

            public uint2x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x4>.Struct<SequenceSumFunc_uint2x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = new SequenceSumFunc_uint2x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint2x4>.New(func);
        }

        public static uint2x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint2x4> output,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint3, TSource, TSourceEnumerator>, uint3>
            where TSource : struct, ISequence<uint3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3>
        {
            public uint3 Invoke(ValueSequence<uint3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint3, TSource, TSourceEnumerator>, uint3>.Struct<SequenceSumFunc_uint3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3>
        {
            return ValueFunc<ValueSequence<uint3, TSource, TSourceEnumerator>, uint3>.New<SequenceSumFunc_uint3<TSource, TSourceEnumerator>>();
        }

        public static uint3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3> output
            )
            where TSource : struct, ISequence<uint3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            public ValueFunc<T, uint3>.Struct<TSelector> Selector;

            public uint3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3>.Struct<SequenceSumFunc_uint3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = new SequenceSumFunc_uint3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3>.New(func);
        }

        public static uint3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3> output,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint3x2, TSource, TSourceEnumerator>, uint3x2>
            where TSource : struct, ISequence<uint3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x2>
        {
            public uint3x2 Invoke(ValueSequence<uint3x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint3x2, TSource, TSourceEnumerator>, uint3x2>.Struct<SequenceSumFunc_uint3x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x2>
        {
            return ValueFunc<ValueSequence<uint3x2, TSource, TSourceEnumerator>, uint3x2>.New<SequenceSumFunc_uint3x2<TSource, TSourceEnumerator>>();
        }

        public static uint3x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x2, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3x2> output
            )
            where TSource : struct, ISequence<uint3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint3x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            public ValueFunc<T, uint3x2>.Struct<TSelector> Selector;

            public uint3x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x2>.Struct<SequenceSumFunc_uint3x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = new SequenceSumFunc_uint3x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x2>.New(func);
        }

        public static uint3x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3x2> output,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint3x3, TSource, TSourceEnumerator>, uint3x3>
            where TSource : struct, ISequence<uint3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x3>
        {
            public uint3x3 Invoke(ValueSequence<uint3x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint3x3, TSource, TSourceEnumerator>, uint3x3>.Struct<SequenceSumFunc_uint3x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x3>
        {
            return ValueFunc<ValueSequence<uint3x3, TSource, TSourceEnumerator>, uint3x3>.New<SequenceSumFunc_uint3x3<TSource, TSourceEnumerator>>();
        }

        public static uint3x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x3, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3x3> output
            )
            where TSource : struct, ISequence<uint3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint3x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            public ValueFunc<T, uint3x3>.Struct<TSelector> Selector;

            public uint3x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x3>.Struct<SequenceSumFunc_uint3x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = new SequenceSumFunc_uint3x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x3>.New(func);
        }

        public static uint3x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3x3> output,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint3x4, TSource, TSourceEnumerator>, uint3x4>
            where TSource : struct, ISequence<uint3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x4>
        {
            public uint3x4 Invoke(ValueSequence<uint3x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint3x4, TSource, TSourceEnumerator>, uint3x4>.Struct<SequenceSumFunc_uint3x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x4>
        {
            return ValueFunc<ValueSequence<uint3x4, TSource, TSourceEnumerator>, uint3x4>.New<SequenceSumFunc_uint3x4<TSource, TSourceEnumerator>>();
        }

        public static uint3x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x4, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3x4> output
            )
            where TSource : struct, ISequence<uint3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint3x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint3x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            public ValueFunc<T, uint3x4>.Struct<TSelector> Selector;

            public uint3x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x4>.Struct<SequenceSumFunc_uint3x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = new SequenceSumFunc_uint3x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint3x4>.New(func);
        }

        public static uint3x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint3x4> output,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint4, TSource, TSourceEnumerator>, uint4>
            where TSource : struct, ISequence<uint4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4>
        {
            public uint4 Invoke(ValueSequence<uint4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint4, TSource, TSourceEnumerator>, uint4>.Struct<SequenceSumFunc_uint4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4>
        {
            return ValueFunc<ValueSequence<uint4, TSource, TSourceEnumerator>, uint4>.New<SequenceSumFunc_uint4<TSource, TSourceEnumerator>>();
        }

        public static uint4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4> output
            )
            where TSource : struct, ISequence<uint4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            public ValueFunc<T, uint4>.Struct<TSelector> Selector;

            public uint4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4>.Struct<SequenceSumFunc_uint4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = new SequenceSumFunc_uint4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4>.New(func);
        }

        public static uint4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4> output,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint4x2, TSource, TSourceEnumerator>, uint4x2>
            where TSource : struct, ISequence<uint4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x2>
        {
            public uint4x2 Invoke(ValueSequence<uint4x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint4x2, TSource, TSourceEnumerator>, uint4x2>.Struct<SequenceSumFunc_uint4x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x2>
        {
            return ValueFunc<ValueSequence<uint4x2, TSource, TSourceEnumerator>, uint4x2>.New<SequenceSumFunc_uint4x2<TSource, TSourceEnumerator>>();
        }

        public static uint4x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x2, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4x2> output
            )
            where TSource : struct, ISequence<uint4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint4x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            public ValueFunc<T, uint4x2>.Struct<TSelector> Selector;

            public uint4x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x2>.Struct<SequenceSumFunc_uint4x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = new SequenceSumFunc_uint4x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x2>.New(func);
        }

        public static uint4x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4x2> output,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint4x3, TSource, TSourceEnumerator>, uint4x3>
            where TSource : struct, ISequence<uint4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x3>
        {
            public uint4x3 Invoke(ValueSequence<uint4x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint4x3, TSource, TSourceEnumerator>, uint4x3>.Struct<SequenceSumFunc_uint4x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x3>
        {
            return ValueFunc<ValueSequence<uint4x3, TSource, TSourceEnumerator>, uint4x3>.New<SequenceSumFunc_uint4x3<TSource, TSourceEnumerator>>();
        }

        public static uint4x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x3, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4x3> output
            )
            where TSource : struct, ISequence<uint4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint4x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            public ValueFunc<T, uint4x3>.Struct<TSelector> Selector;

            public uint4x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x3>.Struct<SequenceSumFunc_uint4x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = new SequenceSumFunc_uint4x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x3>.New(func);
        }

        public static uint4x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4x3> output,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<uint4x4, TSource, TSourceEnumerator>, uint4x4>
            where TSource : struct, ISequence<uint4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x4>
        {
            public uint4x4 Invoke(ValueSequence<uint4x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<uint4x4, TSource, TSourceEnumerator>, uint4x4>.Struct<SequenceSumFunc_uint4x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x4>
        {
            return ValueFunc<ValueSequence<uint4x4, TSource, TSourceEnumerator>, uint4x4>.New<SequenceSumFunc_uint4x4<TSource, TSourceEnumerator>>();
        }

        public static uint4x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x4, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4x4> output
            )
            where TSource : struct, ISequence<uint4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<uint4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<uint4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<uint4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static uint4x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            uint4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_uint4x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            public ValueFunc<T, uint4x4>.Struct<TSelector> Selector;

            public uint4x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x4>.Struct<SequenceSumFunc_uint4x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = new SequenceSumFunc_uint4x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, uint4x4>.New(func);
        }

        public static uint4x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<uint4x4> output,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float, TSource, TSourceEnumerator>, float>
            where TSource : struct, ISequence<float, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float>
        {
            public float Invoke(ValueSequence<float, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float, TSource, TSourceEnumerator>, float>.Struct<SequenceSumFunc_float<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float>
        {
            return ValueFunc<ValueSequence<float, TSource, TSourceEnumerator>, float>.New<SequenceSumFunc_float<TSource, TSourceEnumerator>>();
        }

        public static float RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float, TSource, TSourceEnumerator> source,
            ref NativeArray<float> output
            )
            where TSource : struct, ISequence<float, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float>
        {
            public ValueFunc<T, float>.Struct<TSelector> Selector;

            public float Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float>.Struct<SequenceSumFunc_float<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float>
        {
            var func = new SequenceSumFunc_float<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float>.New(func);
        }

        public static float RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float> output,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float2, TSource, TSourceEnumerator>, float2>
            where TSource : struct, ISequence<float2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2>
        {
            public float2 Invoke(ValueSequence<float2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float2, TSource, TSourceEnumerator>, float2>.Struct<SequenceSumFunc_float2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2>
        {
            return ValueFunc<ValueSequence<float2, TSource, TSourceEnumerator>, float2>.New<SequenceSumFunc_float2<TSource, TSourceEnumerator>>();
        }

        public static float2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2, TSource, TSourceEnumerator> source,
            ref NativeArray<float2> output
            )
            where TSource : struct, ISequence<float2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2>
        {
            public ValueFunc<T, float2>.Struct<TSelector> Selector;

            public float2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2>.Struct<SequenceSumFunc_float2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2>
        {
            var func = new SequenceSumFunc_float2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2>.New(func);
        }

        public static float2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float2> output,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float2x2, TSource, TSourceEnumerator>, float2x2>
            where TSource : struct, ISequence<float2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x2>
        {
            public float2x2 Invoke(ValueSequence<float2x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float2x2, TSource, TSourceEnumerator>, float2x2>.Struct<SequenceSumFunc_float2x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x2>
        {
            return ValueFunc<ValueSequence<float2x2, TSource, TSourceEnumerator>, float2x2>.New<SequenceSumFunc_float2x2<TSource, TSourceEnumerator>>();
        }

        public static float2x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x2, TSource, TSourceEnumerator> source,
            ref NativeArray<float2x2> output
            )
            where TSource : struct, ISequence<float2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float2x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            public ValueFunc<T, float2x2>.Struct<TSelector> Selector;

            public float2x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x2>.Struct<SequenceSumFunc_float2x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = new SequenceSumFunc_float2x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x2>.New(func);
        }

        public static float2x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float2x2> output,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float2x3, TSource, TSourceEnumerator>, float2x3>
            where TSource : struct, ISequence<float2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x3>
        {
            public float2x3 Invoke(ValueSequence<float2x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float2x3, TSource, TSourceEnumerator>, float2x3>.Struct<SequenceSumFunc_float2x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x3>
        {
            return ValueFunc<ValueSequence<float2x3, TSource, TSourceEnumerator>, float2x3>.New<SequenceSumFunc_float2x3<TSource, TSourceEnumerator>>();
        }

        public static float2x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x3, TSource, TSourceEnumerator> source,
            ref NativeArray<float2x3> output
            )
            where TSource : struct, ISequence<float2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float2x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            public ValueFunc<T, float2x3>.Struct<TSelector> Selector;

            public float2x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x3>.Struct<SequenceSumFunc_float2x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = new SequenceSumFunc_float2x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x3>.New(func);
        }

        public static float2x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float2x3> output,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float2x4, TSource, TSourceEnumerator>, float2x4>
            where TSource : struct, ISequence<float2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x4>
        {
            public float2x4 Invoke(ValueSequence<float2x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float2x4, TSource, TSourceEnumerator>, float2x4>.Struct<SequenceSumFunc_float2x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x4>
        {
            return ValueFunc<ValueSequence<float2x4, TSource, TSourceEnumerator>, float2x4>.New<SequenceSumFunc_float2x4<TSource, TSourceEnumerator>>();
        }

        public static float2x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x4, TSource, TSourceEnumerator> source,
            ref NativeArray<float2x4> output
            )
            where TSource : struct, ISequence<float2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float2x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float2x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            public ValueFunc<T, float2x4>.Struct<TSelector> Selector;

            public float2x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x4>.Struct<SequenceSumFunc_float2x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = new SequenceSumFunc_float2x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float2x4>.New(func);
        }

        public static float2x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float2x4> output,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float3, TSource, TSourceEnumerator>, float3>
            where TSource : struct, ISequence<float3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3>
        {
            public float3 Invoke(ValueSequence<float3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float3, TSource, TSourceEnumerator>, float3>.Struct<SequenceSumFunc_float3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3>
        {
            return ValueFunc<ValueSequence<float3, TSource, TSourceEnumerator>, float3>.New<SequenceSumFunc_float3<TSource, TSourceEnumerator>>();
        }

        public static float3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3, TSource, TSourceEnumerator> source,
            ref NativeArray<float3> output
            )
            where TSource : struct, ISequence<float3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3>
        {
            public ValueFunc<T, float3>.Struct<TSelector> Selector;

            public float3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3>.Struct<SequenceSumFunc_float3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3>
        {
            var func = new SequenceSumFunc_float3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3>.New(func);
        }

        public static float3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float3> output,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float3x2, TSource, TSourceEnumerator>, float3x2>
            where TSource : struct, ISequence<float3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x2>
        {
            public float3x2 Invoke(ValueSequence<float3x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float3x2, TSource, TSourceEnumerator>, float3x2>.Struct<SequenceSumFunc_float3x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x2>
        {
            return ValueFunc<ValueSequence<float3x2, TSource, TSourceEnumerator>, float3x2>.New<SequenceSumFunc_float3x2<TSource, TSourceEnumerator>>();
        }

        public static float3x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x2, TSource, TSourceEnumerator> source,
            ref NativeArray<float3x2> output
            )
            where TSource : struct, ISequence<float3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float3x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            public ValueFunc<T, float3x2>.Struct<TSelector> Selector;

            public float3x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x2>.Struct<SequenceSumFunc_float3x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = new SequenceSumFunc_float3x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x2>.New(func);
        }

        public static float3x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float3x2> output,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float3x3, TSource, TSourceEnumerator>, float3x3>
            where TSource : struct, ISequence<float3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x3>
        {
            public float3x3 Invoke(ValueSequence<float3x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float3x3, TSource, TSourceEnumerator>, float3x3>.Struct<SequenceSumFunc_float3x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x3>
        {
            return ValueFunc<ValueSequence<float3x3, TSource, TSourceEnumerator>, float3x3>.New<SequenceSumFunc_float3x3<TSource, TSourceEnumerator>>();
        }

        public static float3x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x3, TSource, TSourceEnumerator> source,
            ref NativeArray<float3x3> output
            )
            where TSource : struct, ISequence<float3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float3x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            public ValueFunc<T, float3x3>.Struct<TSelector> Selector;

            public float3x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x3>.Struct<SequenceSumFunc_float3x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = new SequenceSumFunc_float3x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x3>.New(func);
        }

        public static float3x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float3x3> output,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float3x4, TSource, TSourceEnumerator>, float3x4>
            where TSource : struct, ISequence<float3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x4>
        {
            public float3x4 Invoke(ValueSequence<float3x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float3x4, TSource, TSourceEnumerator>, float3x4>.Struct<SequenceSumFunc_float3x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x4>
        {
            return ValueFunc<ValueSequence<float3x4, TSource, TSourceEnumerator>, float3x4>.New<SequenceSumFunc_float3x4<TSource, TSourceEnumerator>>();
        }

        public static float3x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x4, TSource, TSourceEnumerator> source,
            ref NativeArray<float3x4> output
            )
            where TSource : struct, ISequence<float3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float3x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float3x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            public ValueFunc<T, float3x4>.Struct<TSelector> Selector;

            public float3x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x4>.Struct<SequenceSumFunc_float3x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = new SequenceSumFunc_float3x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float3x4>.New(func);
        }

        public static float3x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float3x4> output,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float4, TSource, TSourceEnumerator>, float4>
            where TSource : struct, ISequence<float4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4>
        {
            public float4 Invoke(ValueSequence<float4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float4, TSource, TSourceEnumerator>, float4>.Struct<SequenceSumFunc_float4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4>
        {
            return ValueFunc<ValueSequence<float4, TSource, TSourceEnumerator>, float4>.New<SequenceSumFunc_float4<TSource, TSourceEnumerator>>();
        }

        public static float4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4, TSource, TSourceEnumerator> source,
            ref NativeArray<float4> output
            )
            where TSource : struct, ISequence<float4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4>
        {
            public ValueFunc<T, float4>.Struct<TSelector> Selector;

            public float4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4>.Struct<SequenceSumFunc_float4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4>
        {
            var func = new SequenceSumFunc_float4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4>.New(func);
        }

        public static float4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float4> output,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float4x2, TSource, TSourceEnumerator>, float4x2>
            where TSource : struct, ISequence<float4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x2>
        {
            public float4x2 Invoke(ValueSequence<float4x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float4x2, TSource, TSourceEnumerator>, float4x2>.Struct<SequenceSumFunc_float4x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x2>
        {
            return ValueFunc<ValueSequence<float4x2, TSource, TSourceEnumerator>, float4x2>.New<SequenceSumFunc_float4x2<TSource, TSourceEnumerator>>();
        }

        public static float4x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x2, TSource, TSourceEnumerator> source,
            ref NativeArray<float4x2> output
            )
            where TSource : struct, ISequence<float4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float4x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            public ValueFunc<T, float4x2>.Struct<TSelector> Selector;

            public float4x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x2>.Struct<SequenceSumFunc_float4x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = new SequenceSumFunc_float4x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x2>.New(func);
        }

        public static float4x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float4x2> output,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float4x3, TSource, TSourceEnumerator>, float4x3>
            where TSource : struct, ISequence<float4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x3>
        {
            public float4x3 Invoke(ValueSequence<float4x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float4x3, TSource, TSourceEnumerator>, float4x3>.Struct<SequenceSumFunc_float4x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x3>
        {
            return ValueFunc<ValueSequence<float4x3, TSource, TSourceEnumerator>, float4x3>.New<SequenceSumFunc_float4x3<TSource, TSourceEnumerator>>();
        }

        public static float4x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x3, TSource, TSourceEnumerator> source,
            ref NativeArray<float4x3> output
            )
            where TSource : struct, ISequence<float4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float4x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            public ValueFunc<T, float4x3>.Struct<TSelector> Selector;

            public float4x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x3>.Struct<SequenceSumFunc_float4x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = new SequenceSumFunc_float4x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x3>.New(func);
        }

        public static float4x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float4x3> output,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<float4x4, TSource, TSourceEnumerator>, float4x4>
            where TSource : struct, ISequence<float4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x4>
        {
            public float4x4 Invoke(ValueSequence<float4x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<float4x4, TSource, TSourceEnumerator>, float4x4>.Struct<SequenceSumFunc_float4x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x4>
        {
            return ValueFunc<ValueSequence<float4x4, TSource, TSourceEnumerator>, float4x4>.New<SequenceSumFunc_float4x4<TSource, TSourceEnumerator>>();
        }

        public static float4x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x4, TSource, TSourceEnumerator> source,
            ref NativeArray<float4x4> output
            )
            where TSource : struct, ISequence<float4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<float4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<float4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<float4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static float4x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            float4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_float4x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            public ValueFunc<T, float4x4>.Struct<TSelector> Selector;

            public float4x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x4>.Struct<SequenceSumFunc_float4x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = new SequenceSumFunc_float4x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, float4x4>.New(func);
        }

        public static float4x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<float4x4> output,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double, TSource, TSourceEnumerator>, double>
            where TSource : struct, ISequence<double, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double>
        {
            public double Invoke(ValueSequence<double, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double, TSource, TSourceEnumerator>, double>.Struct<SequenceSumFunc_double<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double>
        {
            return ValueFunc<ValueSequence<double, TSource, TSourceEnumerator>, double>.New<SequenceSumFunc_double<TSource, TSourceEnumerator>>();
        }

        public static double RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double, TSource, TSourceEnumerator> source,
            ref NativeArray<double> output
            )
            where TSource : struct, ISequence<double, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double>
        {
            public ValueFunc<T, double>.Struct<TSelector> Selector;

            public double Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double>.Struct<SequenceSumFunc_double<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double>
        {
            var func = new SequenceSumFunc_double<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double>.New(func);
        }

        public static double RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double> output,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double2, TSource, TSourceEnumerator>, double2>
            where TSource : struct, ISequence<double2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2>
        {
            public double2 Invoke(ValueSequence<double2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double2, TSource, TSourceEnumerator>, double2>.Struct<SequenceSumFunc_double2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2>
        {
            return ValueFunc<ValueSequence<double2, TSource, TSourceEnumerator>, double2>.New<SequenceSumFunc_double2<TSource, TSourceEnumerator>>();
        }

        public static double2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2, TSource, TSourceEnumerator> source,
            ref NativeArray<double2> output
            )
            where TSource : struct, ISequence<double2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2>
        {
            public ValueFunc<T, double2>.Struct<TSelector> Selector;

            public double2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2>.Struct<SequenceSumFunc_double2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2>
        {
            var func = new SequenceSumFunc_double2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2>.New(func);
        }

        public static double2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double2> output,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double2x2, TSource, TSourceEnumerator>, double2x2>
            where TSource : struct, ISequence<double2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x2>
        {
            public double2x2 Invoke(ValueSequence<double2x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double2x2, TSource, TSourceEnumerator>, double2x2>.Struct<SequenceSumFunc_double2x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x2>
        {
            return ValueFunc<ValueSequence<double2x2, TSource, TSourceEnumerator>, double2x2>.New<SequenceSumFunc_double2x2<TSource, TSourceEnumerator>>();
        }

        public static double2x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x2, TSource, TSourceEnumerator> source,
            ref NativeArray<double2x2> output
            )
            where TSource : struct, ISequence<double2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double2x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            public ValueFunc<T, double2x2>.Struct<TSelector> Selector;

            public double2x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x2>.Struct<SequenceSumFunc_double2x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = new SequenceSumFunc_double2x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x2>.New(func);
        }

        public static double2x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double2x2> output,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double2x3, TSource, TSourceEnumerator>, double2x3>
            where TSource : struct, ISequence<double2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x3>
        {
            public double2x3 Invoke(ValueSequence<double2x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double2x3, TSource, TSourceEnumerator>, double2x3>.Struct<SequenceSumFunc_double2x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x3>
        {
            return ValueFunc<ValueSequence<double2x3, TSource, TSourceEnumerator>, double2x3>.New<SequenceSumFunc_double2x3<TSource, TSourceEnumerator>>();
        }

        public static double2x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x3, TSource, TSourceEnumerator> source,
            ref NativeArray<double2x3> output
            )
            where TSource : struct, ISequence<double2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double2x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            public ValueFunc<T, double2x3>.Struct<TSelector> Selector;

            public double2x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x3>.Struct<SequenceSumFunc_double2x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = new SequenceSumFunc_double2x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x3>.New(func);
        }

        public static double2x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double2x3> output,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double2x4, TSource, TSourceEnumerator>, double2x4>
            where TSource : struct, ISequence<double2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x4>
        {
            public double2x4 Invoke(ValueSequence<double2x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double2x4, TSource, TSourceEnumerator>, double2x4>.Struct<SequenceSumFunc_double2x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x4>
        {
            return ValueFunc<ValueSequence<double2x4, TSource, TSourceEnumerator>, double2x4>.New<SequenceSumFunc_double2x4<TSource, TSourceEnumerator>>();
        }

        public static double2x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x4, TSource, TSourceEnumerator> source,
            ref NativeArray<double2x4> output
            )
            where TSource : struct, ISequence<double2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double2x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double2x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double2x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double2x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double2x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double2x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            public ValueFunc<T, double2x4>.Struct<TSelector> Selector;

            public double2x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x4>.Struct<SequenceSumFunc_double2x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = new SequenceSumFunc_double2x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double2x4>.New(func);
        }

        public static double2x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double2x4> output,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double3, TSource, TSourceEnumerator>, double3>
            where TSource : struct, ISequence<double3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3>
        {
            public double3 Invoke(ValueSequence<double3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double3, TSource, TSourceEnumerator>, double3>.Struct<SequenceSumFunc_double3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3>
        {
            return ValueFunc<ValueSequence<double3, TSource, TSourceEnumerator>, double3>.New<SequenceSumFunc_double3<TSource, TSourceEnumerator>>();
        }

        public static double3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3, TSource, TSourceEnumerator> source,
            ref NativeArray<double3> output
            )
            where TSource : struct, ISequence<double3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3>
        {
            public ValueFunc<T, double3>.Struct<TSelector> Selector;

            public double3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3>.Struct<SequenceSumFunc_double3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3>
        {
            var func = new SequenceSumFunc_double3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3>.New(func);
        }

        public static double3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double3> output,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double3x2, TSource, TSourceEnumerator>, double3x2>
            where TSource : struct, ISequence<double3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x2>
        {
            public double3x2 Invoke(ValueSequence<double3x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double3x2, TSource, TSourceEnumerator>, double3x2>.Struct<SequenceSumFunc_double3x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x2>
        {
            return ValueFunc<ValueSequence<double3x2, TSource, TSourceEnumerator>, double3x2>.New<SequenceSumFunc_double3x2<TSource, TSourceEnumerator>>();
        }

        public static double3x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x2, TSource, TSourceEnumerator> source,
            ref NativeArray<double3x2> output
            )
            where TSource : struct, ISequence<double3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double3x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            public ValueFunc<T, double3x2>.Struct<TSelector> Selector;

            public double3x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x2>.Struct<SequenceSumFunc_double3x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = new SequenceSumFunc_double3x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x2>.New(func);
        }

        public static double3x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double3x2> output,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double3x3, TSource, TSourceEnumerator>, double3x3>
            where TSource : struct, ISequence<double3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x3>
        {
            public double3x3 Invoke(ValueSequence<double3x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double3x3, TSource, TSourceEnumerator>, double3x3>.Struct<SequenceSumFunc_double3x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x3>
        {
            return ValueFunc<ValueSequence<double3x3, TSource, TSourceEnumerator>, double3x3>.New<SequenceSumFunc_double3x3<TSource, TSourceEnumerator>>();
        }

        public static double3x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x3, TSource, TSourceEnumerator> source,
            ref NativeArray<double3x3> output
            )
            where TSource : struct, ISequence<double3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double3x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            public ValueFunc<T, double3x3>.Struct<TSelector> Selector;

            public double3x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x3>.Struct<SequenceSumFunc_double3x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = new SequenceSumFunc_double3x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x3>.New(func);
        }

        public static double3x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double3x3> output,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double3x4, TSource, TSourceEnumerator>, double3x4>
            where TSource : struct, ISequence<double3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x4>
        {
            public double3x4 Invoke(ValueSequence<double3x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double3x4, TSource, TSourceEnumerator>, double3x4>.Struct<SequenceSumFunc_double3x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x4>
        {
            return ValueFunc<ValueSequence<double3x4, TSource, TSourceEnumerator>, double3x4>.New<SequenceSumFunc_double3x4<TSource, TSourceEnumerator>>();
        }

        public static double3x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x4, TSource, TSourceEnumerator> source,
            ref NativeArray<double3x4> output
            )
            where TSource : struct, ISequence<double3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double3x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double3x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double3x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double3x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double3x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double3x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            public ValueFunc<T, double3x4>.Struct<TSelector> Selector;

            public double3x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x4>.Struct<SequenceSumFunc_double3x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = new SequenceSumFunc_double3x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double3x4>.New(func);
        }

        public static double3x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double3x4> output,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double4, TSource, TSourceEnumerator>, double4>
            where TSource : struct, ISequence<double4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4>
        {
            public double4 Invoke(ValueSequence<double4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double4, TSource, TSourceEnumerator>, double4>.Struct<SequenceSumFunc_double4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4>
        {
            return ValueFunc<ValueSequence<double4, TSource, TSourceEnumerator>, double4>.New<SequenceSumFunc_double4<TSource, TSourceEnumerator>>();
        }

        public static double4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4, TSource, TSourceEnumerator> source,
            ref NativeArray<double4> output
            )
            where TSource : struct, ISequence<double4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4>
        {
            public ValueFunc<T, double4>.Struct<TSelector> Selector;

            public double4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4>.Struct<SequenceSumFunc_double4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4>
        {
            var func = new SequenceSumFunc_double4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4>.New(func);
        }

        public static double4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double4> output,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4x2 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x2 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4x2<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double4x2, TSource, TSourceEnumerator>, double4x2>
            where TSource : struct, ISequence<double4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x2>
        {
            public double4x2 Invoke(ValueSequence<double4x2, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double4x2, TSource, TSourceEnumerator>, double4x2>.Struct<SequenceSumFunc_double4x2<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x2>
        {
            return ValueFunc<ValueSequence<double4x2, TSource, TSourceEnumerator>, double4x2>.New<SequenceSumFunc_double4x2<TSource, TSourceEnumerator>>();
        }

        public static double4x2 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x2>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x2, TSource, TSourceEnumerator> source,
            ref NativeArray<double4x2> output
            )
            where TSource : struct, ISequence<double4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x2> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x2, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x2, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x2>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double4x2 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x2 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4x2<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x2>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            public ValueFunc<T, double4x2>.Struct<TSelector> Selector;

            public double4x2 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x2>.Struct<SequenceSumFunc_double4x2<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = new SequenceSumFunc_double4x2<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x2>.New(func);
        }

        public static double4x2 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double4x2> output,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x2> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4x3 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x3 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4x3<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double4x3, TSource, TSourceEnumerator>, double4x3>
            where TSource : struct, ISequence<double4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x3>
        {
            public double4x3 Invoke(ValueSequence<double4x3, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double4x3, TSource, TSourceEnumerator>, double4x3>.Struct<SequenceSumFunc_double4x3<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x3>
        {
            return ValueFunc<ValueSequence<double4x3, TSource, TSourceEnumerator>, double4x3>.New<SequenceSumFunc_double4x3<TSource, TSourceEnumerator>>();
        }

        public static double4x3 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x3>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x3, TSource, TSourceEnumerator> source,
            ref NativeArray<double4x3> output
            )
            where TSource : struct, ISequence<double4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x3> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x3, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x3, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x3>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double4x3 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x3 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4x3<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x3>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            public ValueFunc<T, double4x3>.Struct<TSelector> Selector;

            public double4x3 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x3>.Struct<SequenceSumFunc_double4x3<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = new SequenceSumFunc_double4x3<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x3>.New(func);
        }

        public static double4x3 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double4x3> output,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x3> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4x4 Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x4 sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4x4<TSource, TSourceEnumerator>
            : IFunc<ValueSequence<double4x4, TSource, TSourceEnumerator>, double4x4>
            where TSource : struct, ISequence<double4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x4>
        {
            public double4x4 Invoke(ValueSequence<double4x4, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<ValueSequence<double4x4, TSource, TSourceEnumerator>, double4x4>.Struct<SequenceSumFunc_double4x4<TSource, TSourceEnumerator>>
        SumAsFunc<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x4>
        {
            return ValueFunc<ValueSequence<double4x4, TSource, TSourceEnumerator>, double4x4>.New<SequenceSumFunc_double4x4<TSource, TSourceEnumerator>>();
        }

        public static double4x4 RunSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x4>
        {
            var func = source.SumAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x4, TSource, TSourceEnumerator> source,
            ref NativeArray<double4x4> output
            )
            where TSource : struct, ISequence<double4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x4> ScheduleSum<TSource, TSourceEnumerator>(
            this in ValueSequence<double4x4, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<double4x4, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<double4x4>
        {
            var func = source.SumAsFunc();
            return source.Schedule(func);
        }

        public static double4x4 Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            double4x4 sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

        public struct SequenceSumFunc_double4x4<T, TSource, TSourceEnumerator, TSelector>
            : IFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x4>
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            public ValueFunc<T, double4x4>.Struct<TSelector> Selector;

            public double4x4 Invoke(ValueSequence<T, TSource, TSourceEnumerator> seq)
            {
                return seq.Sum(Selector);
            }
        }

        public static ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x4>.Struct<SequenceSumFunc_double4x4<T, TSource, TSourceEnumerator, TSelector>>
        SumAsFunc<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = new SequenceSumFunc_double4x4<T, TSource, TSourceEnumerator, TSelector> { Selector = selector };
            return ValueFunc<ValueSequence<T, TSource, TSourceEnumerator>, double4x4>.New(func);
        }

        public static double4x4 RunSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ref NativeArray<double4x4> output,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x4> ScheduleSum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.SumAsFunc(selector);
            return source.Schedule(func);
        }


    }
}
