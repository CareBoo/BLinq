<#@ assembly name="System.Core" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Unity.Collections;
using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {
<#
var TYPES = new[] { "int", "uint", "float", "double" };
foreach (string TYPE in TYPES)
{
    for (var i = 1; i<= 4; i++)
    {
        for (var j = 1; j <= 4; j++)
        {
            string NUM1 = i == 1 ? "" : i.ToString();
            if (i == 1 && j > 1) break;
            string SEP = j == 1 ? "" : "x";
            string NUM2 = j == 1 ? "" : j.ToString();
            string TYPE_FULL = $"{TYPE}{NUM1}{SEP}{NUM2}";
#>
        public static <#=TYPE_FULL#> Sum<TSource, TSourceEnumerator>(
            this in ValueSequence<<#=TYPE_FULL#>, TSource, TSourceEnumerator> source
            )
            where TSource : struct, ISequence<<#=TYPE_FULL#>, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<<#=TYPE_FULL#>>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            <#=TYPE_FULL#> sum = srcList[0];
            for (var i = 1; i < srcList.Length; i++)
                sum += srcList[i];
            srcList.Dispose();
            return sum;
        }

        public static <#=TYPE_FULL#> Sum<T, TSource, TSourceEnumerator, TSelector>(
            this in ValueSequence<T, TSource, TSourceEnumerator> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSource : struct, ISequence<T, TSourceEnumerator>
            where TSourceEnumerator : struct, IEnumerator<T>
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            var srcList = source.ToNativeList(Allocator.Temp);
            if (srcList.Length == 0)
            {
                srcList.Dispose();
                throw Error.NoElements();
            }
            <#=TYPE_FULL#> sum = selector.Invoke(srcList[0]);
            for (var i = 1; i < srcList.Length; i++)
                sum += selector.Invoke(srcList[i]);
            srcList.Dispose();
            return sum;
        }

<#
        }
    }
}
#>
    }
}
