

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {

        public static int Average(this in NativeArray<int> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int
            : IFunc<NativeArray<int>, int>
        {
            public int Invoke(NativeArray<int> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int>, int>.Struct<ArrayAverageFunc_int>
        AverageAsFunc(
            this in NativeArray<int> source
            )
        {
            return ValueFunc<NativeArray<int>, int>.New<ArrayAverageFunc_int>();
        }

        public static int RunAverage(
            this in NativeArray<int> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int> source,
            ref NativeArray<int> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int> ScheduleAverage(
            this in NativeArray<int> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int<T, TSelector>
            : IFunc<NativeArray<T>, int>
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            readonly ValueFunc<T, int>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int(ValueFunc<T, int>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int>.Struct<ArrayAverageSelectorFunc_int<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = new ArrayAverageSelectorFunc_int<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int>.New(func);
        }

        public static int RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector,
            ref NativeArray<int> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2 Average(this in NativeArray<int2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int2
            : IFunc<NativeArray<int2>, int2>
        {
            public int2 Invoke(NativeArray<int2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int2>, int2>.Struct<ArrayAverageFunc_int2>
        AverageAsFunc(
            this in NativeArray<int2> source
            )
        {
            return ValueFunc<NativeArray<int2>, int2>.New<ArrayAverageFunc_int2>();
        }

        public static int2 RunAverage(
            this in NativeArray<int2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2> source,
            ref NativeArray<int2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2> ScheduleAverage(
            this in NativeArray<int2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int2<T, TSelector>
            : IFunc<NativeArray<T>, int2>
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            readonly ValueFunc<T, int2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int2(ValueFunc<T, int2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2>.Struct<ArrayAverageSelectorFunc_int2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = new ArrayAverageSelectorFunc_int2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int2>.New(func);
        }

        public static int2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector,
            ref NativeArray<int2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2x2 Average(this in NativeArray<int2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int2x2
            : IFunc<NativeArray<int2x2>, int2x2>
        {
            public int2x2 Invoke(NativeArray<int2x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int2x2>, int2x2>.Struct<ArrayAverageFunc_int2x2>
        AverageAsFunc(
            this in NativeArray<int2x2> source
            )
        {
            return ValueFunc<NativeArray<int2x2>, int2x2>.New<ArrayAverageFunc_int2x2>();
        }

        public static int2x2 RunAverage(
            this in NativeArray<int2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2x2> source,
            ref NativeArray<int2x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x2> ScheduleAverage(
            this in NativeArray<int2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int2x2<T, TSelector>
            : IFunc<NativeArray<T>, int2x2>
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            readonly ValueFunc<T, int2x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int2x2(ValueFunc<T, int2x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int2x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2x2>.Struct<ArrayAverageSelectorFunc_int2x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = new ArrayAverageSelectorFunc_int2x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int2x2>.New(func);
        }

        public static int2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector,
            ref NativeArray<int2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2x3 Average(this in NativeArray<int2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int2x3
            : IFunc<NativeArray<int2x3>, int2x3>
        {
            public int2x3 Invoke(NativeArray<int2x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int2x3>, int2x3>.Struct<ArrayAverageFunc_int2x3>
        AverageAsFunc(
            this in NativeArray<int2x3> source
            )
        {
            return ValueFunc<NativeArray<int2x3>, int2x3>.New<ArrayAverageFunc_int2x3>();
        }

        public static int2x3 RunAverage(
            this in NativeArray<int2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2x3> source,
            ref NativeArray<int2x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x3> ScheduleAverage(
            this in NativeArray<int2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int2x3<T, TSelector>
            : IFunc<NativeArray<T>, int2x3>
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            readonly ValueFunc<T, int2x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int2x3(ValueFunc<T, int2x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int2x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2x3>.Struct<ArrayAverageSelectorFunc_int2x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = new ArrayAverageSelectorFunc_int2x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int2x3>.New(func);
        }

        public static int2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector,
            ref NativeArray<int2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int2x4 Average(this in NativeArray<int2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int2x4
            : IFunc<NativeArray<int2x4>, int2x4>
        {
            public int2x4 Invoke(NativeArray<int2x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int2x4>, int2x4>.Struct<ArrayAverageFunc_int2x4>
        AverageAsFunc(
            this in NativeArray<int2x4> source
            )
        {
            return ValueFunc<NativeArray<int2x4>, int2x4>.New<ArrayAverageFunc_int2x4>();
        }

        public static int2x4 RunAverage(
            this in NativeArray<int2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2x4> source,
            ref NativeArray<int2x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x4> ScheduleAverage(
            this in NativeArray<int2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int2x4<T, TSelector>
            : IFunc<NativeArray<T>, int2x4>
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            readonly ValueFunc<T, int2x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int2x4(ValueFunc<T, int2x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int2x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2x4>.Struct<ArrayAverageSelectorFunc_int2x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = new ArrayAverageSelectorFunc_int2x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int2x4>.New(func);
        }

        public static int2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector,
            ref NativeArray<int2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3 Average(this in NativeArray<int3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int3
            : IFunc<NativeArray<int3>, int3>
        {
            public int3 Invoke(NativeArray<int3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int3>, int3>.Struct<ArrayAverageFunc_int3>
        AverageAsFunc(
            this in NativeArray<int3> source
            )
        {
            return ValueFunc<NativeArray<int3>, int3>.New<ArrayAverageFunc_int3>();
        }

        public static int3 RunAverage(
            this in NativeArray<int3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3> source,
            ref NativeArray<int3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3> ScheduleAverage(
            this in NativeArray<int3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int3<T, TSelector>
            : IFunc<NativeArray<T>, int3>
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            readonly ValueFunc<T, int3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int3(ValueFunc<T, int3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3>.Struct<ArrayAverageSelectorFunc_int3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = new ArrayAverageSelectorFunc_int3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int3>.New(func);
        }

        public static int3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector,
            ref NativeArray<int3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3x2 Average(this in NativeArray<int3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int3x2
            : IFunc<NativeArray<int3x2>, int3x2>
        {
            public int3x2 Invoke(NativeArray<int3x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int3x2>, int3x2>.Struct<ArrayAverageFunc_int3x2>
        AverageAsFunc(
            this in NativeArray<int3x2> source
            )
        {
            return ValueFunc<NativeArray<int3x2>, int3x2>.New<ArrayAverageFunc_int3x2>();
        }

        public static int3x2 RunAverage(
            this in NativeArray<int3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3x2> source,
            ref NativeArray<int3x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x2> ScheduleAverage(
            this in NativeArray<int3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int3x2<T, TSelector>
            : IFunc<NativeArray<T>, int3x2>
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            readonly ValueFunc<T, int3x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int3x2(ValueFunc<T, int3x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int3x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3x2>.Struct<ArrayAverageSelectorFunc_int3x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = new ArrayAverageSelectorFunc_int3x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int3x2>.New(func);
        }

        public static int3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector,
            ref NativeArray<int3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3x3 Average(this in NativeArray<int3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int3x3
            : IFunc<NativeArray<int3x3>, int3x3>
        {
            public int3x3 Invoke(NativeArray<int3x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int3x3>, int3x3>.Struct<ArrayAverageFunc_int3x3>
        AverageAsFunc(
            this in NativeArray<int3x3> source
            )
        {
            return ValueFunc<NativeArray<int3x3>, int3x3>.New<ArrayAverageFunc_int3x3>();
        }

        public static int3x3 RunAverage(
            this in NativeArray<int3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3x3> source,
            ref NativeArray<int3x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x3> ScheduleAverage(
            this in NativeArray<int3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int3x3<T, TSelector>
            : IFunc<NativeArray<T>, int3x3>
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            readonly ValueFunc<T, int3x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int3x3(ValueFunc<T, int3x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int3x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3x3>.Struct<ArrayAverageSelectorFunc_int3x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = new ArrayAverageSelectorFunc_int3x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int3x3>.New(func);
        }

        public static int3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector,
            ref NativeArray<int3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int3x4 Average(this in NativeArray<int3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int3x4
            : IFunc<NativeArray<int3x4>, int3x4>
        {
            public int3x4 Invoke(NativeArray<int3x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int3x4>, int3x4>.Struct<ArrayAverageFunc_int3x4>
        AverageAsFunc(
            this in NativeArray<int3x4> source
            )
        {
            return ValueFunc<NativeArray<int3x4>, int3x4>.New<ArrayAverageFunc_int3x4>();
        }

        public static int3x4 RunAverage(
            this in NativeArray<int3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3x4> source,
            ref NativeArray<int3x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x4> ScheduleAverage(
            this in NativeArray<int3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int3x4<T, TSelector>
            : IFunc<NativeArray<T>, int3x4>
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            readonly ValueFunc<T, int3x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int3x4(ValueFunc<T, int3x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int3x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3x4>.Struct<ArrayAverageSelectorFunc_int3x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = new ArrayAverageSelectorFunc_int3x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int3x4>.New(func);
        }

        public static int3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector,
            ref NativeArray<int3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4 Average(this in NativeArray<int4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int4
            : IFunc<NativeArray<int4>, int4>
        {
            public int4 Invoke(NativeArray<int4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int4>, int4>.Struct<ArrayAverageFunc_int4>
        AverageAsFunc(
            this in NativeArray<int4> source
            )
        {
            return ValueFunc<NativeArray<int4>, int4>.New<ArrayAverageFunc_int4>();
        }

        public static int4 RunAverage(
            this in NativeArray<int4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4> source,
            ref NativeArray<int4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4> ScheduleAverage(
            this in NativeArray<int4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int4<T, TSelector>
            : IFunc<NativeArray<T>, int4>
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            readonly ValueFunc<T, int4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int4(ValueFunc<T, int4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4>.Struct<ArrayAverageSelectorFunc_int4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = new ArrayAverageSelectorFunc_int4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int4>.New(func);
        }

        public static int4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector,
            ref NativeArray<int4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4x2 Average(this in NativeArray<int4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int4x2
            : IFunc<NativeArray<int4x2>, int4x2>
        {
            public int4x2 Invoke(NativeArray<int4x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int4x2>, int4x2>.Struct<ArrayAverageFunc_int4x2>
        AverageAsFunc(
            this in NativeArray<int4x2> source
            )
        {
            return ValueFunc<NativeArray<int4x2>, int4x2>.New<ArrayAverageFunc_int4x2>();
        }

        public static int4x2 RunAverage(
            this in NativeArray<int4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4x2> source,
            ref NativeArray<int4x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x2> ScheduleAverage(
            this in NativeArray<int4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int4x2<T, TSelector>
            : IFunc<NativeArray<T>, int4x2>
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            readonly ValueFunc<T, int4x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int4x2(ValueFunc<T, int4x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int4x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4x2>.Struct<ArrayAverageSelectorFunc_int4x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = new ArrayAverageSelectorFunc_int4x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int4x2>.New(func);
        }

        public static int4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector,
            ref NativeArray<int4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4x3 Average(this in NativeArray<int4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int4x3
            : IFunc<NativeArray<int4x3>, int4x3>
        {
            public int4x3 Invoke(NativeArray<int4x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int4x3>, int4x3>.Struct<ArrayAverageFunc_int4x3>
        AverageAsFunc(
            this in NativeArray<int4x3> source
            )
        {
            return ValueFunc<NativeArray<int4x3>, int4x3>.New<ArrayAverageFunc_int4x3>();
        }

        public static int4x3 RunAverage(
            this in NativeArray<int4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4x3> source,
            ref NativeArray<int4x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x3> ScheduleAverage(
            this in NativeArray<int4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int4x3<T, TSelector>
            : IFunc<NativeArray<T>, int4x3>
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            readonly ValueFunc<T, int4x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int4x3(ValueFunc<T, int4x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int4x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4x3>.Struct<ArrayAverageSelectorFunc_int4x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = new ArrayAverageSelectorFunc_int4x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int4x3>.New(func);
        }

        public static int4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector,
            ref NativeArray<int4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static int4x4 Average(this in NativeArray<int4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_int4x4
            : IFunc<NativeArray<int4x4>, int4x4>
        {
            public int4x4 Invoke(NativeArray<int4x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<int4x4>, int4x4>.Struct<ArrayAverageFunc_int4x4>
        AverageAsFunc(
            this in NativeArray<int4x4> source
            )
        {
            return ValueFunc<NativeArray<int4x4>, int4x4>.New<ArrayAverageFunc_int4x4>();
        }

        public static int4x4 RunAverage(
            this in NativeArray<int4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4x4> source,
            ref NativeArray<int4x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x4> ScheduleAverage(
            this in NativeArray<int4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static int4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_int4x4<T, TSelector>
            : IFunc<NativeArray<T>, int4x4>
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            readonly ValueFunc<T, int4x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_int4x4(ValueFunc<T, int4x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public int4x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4x4>.Struct<ArrayAverageSelectorFunc_int4x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = new ArrayAverageSelectorFunc_int4x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, int4x4>.New(func);
        }

        public static int4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector,
            ref NativeArray<int4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<int4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint Average(this in NativeArray<uint> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint
            : IFunc<NativeArray<uint>, uint>
        {
            public uint Invoke(NativeArray<uint> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint>, uint>.Struct<ArrayAverageFunc_uint>
        AverageAsFunc(
            this in NativeArray<uint> source
            )
        {
            return ValueFunc<NativeArray<uint>, uint>.New<ArrayAverageFunc_uint>();
        }

        public static uint RunAverage(
            this in NativeArray<uint> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint> source,
            ref NativeArray<uint> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint> ScheduleAverage(
            this in NativeArray<uint> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint<T, TSelector>
            : IFunc<NativeArray<T>, uint>
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            readonly ValueFunc<T, uint>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint(ValueFunc<T, uint>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint>.Struct<ArrayAverageSelectorFunc_uint<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = new ArrayAverageSelectorFunc_uint<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint>.New(func);
        }

        public static uint RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector,
            ref NativeArray<uint> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2 Average(this in NativeArray<uint2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint2
            : IFunc<NativeArray<uint2>, uint2>
        {
            public uint2 Invoke(NativeArray<uint2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint2>, uint2>.Struct<ArrayAverageFunc_uint2>
        AverageAsFunc(
            this in NativeArray<uint2> source
            )
        {
            return ValueFunc<NativeArray<uint2>, uint2>.New<ArrayAverageFunc_uint2>();
        }

        public static uint2 RunAverage(
            this in NativeArray<uint2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2> source,
            ref NativeArray<uint2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2> ScheduleAverage(
            this in NativeArray<uint2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint2<T, TSelector>
            : IFunc<NativeArray<T>, uint2>
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            readonly ValueFunc<T, uint2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint2(ValueFunc<T, uint2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2>.Struct<ArrayAverageSelectorFunc_uint2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = new ArrayAverageSelectorFunc_uint2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint2>.New(func);
        }

        public static uint2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector,
            ref NativeArray<uint2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2x2 Average(this in NativeArray<uint2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint2x2
            : IFunc<NativeArray<uint2x2>, uint2x2>
        {
            public uint2x2 Invoke(NativeArray<uint2x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint2x2>, uint2x2>.Struct<ArrayAverageFunc_uint2x2>
        AverageAsFunc(
            this in NativeArray<uint2x2> source
            )
        {
            return ValueFunc<NativeArray<uint2x2>, uint2x2>.New<ArrayAverageFunc_uint2x2>();
        }

        public static uint2x2 RunAverage(
            this in NativeArray<uint2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2x2> source,
            ref NativeArray<uint2x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x2> ScheduleAverage(
            this in NativeArray<uint2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint2x2<T, TSelector>
            : IFunc<NativeArray<T>, uint2x2>
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            readonly ValueFunc<T, uint2x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint2x2(ValueFunc<T, uint2x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint2x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2x2>.Struct<ArrayAverageSelectorFunc_uint2x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = new ArrayAverageSelectorFunc_uint2x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint2x2>.New(func);
        }

        public static uint2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector,
            ref NativeArray<uint2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2x3 Average(this in NativeArray<uint2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint2x3
            : IFunc<NativeArray<uint2x3>, uint2x3>
        {
            public uint2x3 Invoke(NativeArray<uint2x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint2x3>, uint2x3>.Struct<ArrayAverageFunc_uint2x3>
        AverageAsFunc(
            this in NativeArray<uint2x3> source
            )
        {
            return ValueFunc<NativeArray<uint2x3>, uint2x3>.New<ArrayAverageFunc_uint2x3>();
        }

        public static uint2x3 RunAverage(
            this in NativeArray<uint2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2x3> source,
            ref NativeArray<uint2x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x3> ScheduleAverage(
            this in NativeArray<uint2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint2x3<T, TSelector>
            : IFunc<NativeArray<T>, uint2x3>
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            readonly ValueFunc<T, uint2x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint2x3(ValueFunc<T, uint2x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint2x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2x3>.Struct<ArrayAverageSelectorFunc_uint2x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = new ArrayAverageSelectorFunc_uint2x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint2x3>.New(func);
        }

        public static uint2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector,
            ref NativeArray<uint2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint2x4 Average(this in NativeArray<uint2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint2x4
            : IFunc<NativeArray<uint2x4>, uint2x4>
        {
            public uint2x4 Invoke(NativeArray<uint2x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint2x4>, uint2x4>.Struct<ArrayAverageFunc_uint2x4>
        AverageAsFunc(
            this in NativeArray<uint2x4> source
            )
        {
            return ValueFunc<NativeArray<uint2x4>, uint2x4>.New<ArrayAverageFunc_uint2x4>();
        }

        public static uint2x4 RunAverage(
            this in NativeArray<uint2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2x4> source,
            ref NativeArray<uint2x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x4> ScheduleAverage(
            this in NativeArray<uint2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint2x4<T, TSelector>
            : IFunc<NativeArray<T>, uint2x4>
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            readonly ValueFunc<T, uint2x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint2x4(ValueFunc<T, uint2x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint2x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2x4>.Struct<ArrayAverageSelectorFunc_uint2x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = new ArrayAverageSelectorFunc_uint2x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint2x4>.New(func);
        }

        public static uint2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector,
            ref NativeArray<uint2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3 Average(this in NativeArray<uint3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint3
            : IFunc<NativeArray<uint3>, uint3>
        {
            public uint3 Invoke(NativeArray<uint3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint3>, uint3>.Struct<ArrayAverageFunc_uint3>
        AverageAsFunc(
            this in NativeArray<uint3> source
            )
        {
            return ValueFunc<NativeArray<uint3>, uint3>.New<ArrayAverageFunc_uint3>();
        }

        public static uint3 RunAverage(
            this in NativeArray<uint3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3> source,
            ref NativeArray<uint3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3> ScheduleAverage(
            this in NativeArray<uint3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint3<T, TSelector>
            : IFunc<NativeArray<T>, uint3>
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            readonly ValueFunc<T, uint3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint3(ValueFunc<T, uint3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3>.Struct<ArrayAverageSelectorFunc_uint3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = new ArrayAverageSelectorFunc_uint3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint3>.New(func);
        }

        public static uint3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector,
            ref NativeArray<uint3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3x2 Average(this in NativeArray<uint3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint3x2
            : IFunc<NativeArray<uint3x2>, uint3x2>
        {
            public uint3x2 Invoke(NativeArray<uint3x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint3x2>, uint3x2>.Struct<ArrayAverageFunc_uint3x2>
        AverageAsFunc(
            this in NativeArray<uint3x2> source
            )
        {
            return ValueFunc<NativeArray<uint3x2>, uint3x2>.New<ArrayAverageFunc_uint3x2>();
        }

        public static uint3x2 RunAverage(
            this in NativeArray<uint3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3x2> source,
            ref NativeArray<uint3x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x2> ScheduleAverage(
            this in NativeArray<uint3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint3x2<T, TSelector>
            : IFunc<NativeArray<T>, uint3x2>
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            readonly ValueFunc<T, uint3x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint3x2(ValueFunc<T, uint3x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint3x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3x2>.Struct<ArrayAverageSelectorFunc_uint3x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = new ArrayAverageSelectorFunc_uint3x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint3x2>.New(func);
        }

        public static uint3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector,
            ref NativeArray<uint3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3x3 Average(this in NativeArray<uint3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint3x3
            : IFunc<NativeArray<uint3x3>, uint3x3>
        {
            public uint3x3 Invoke(NativeArray<uint3x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint3x3>, uint3x3>.Struct<ArrayAverageFunc_uint3x3>
        AverageAsFunc(
            this in NativeArray<uint3x3> source
            )
        {
            return ValueFunc<NativeArray<uint3x3>, uint3x3>.New<ArrayAverageFunc_uint3x3>();
        }

        public static uint3x3 RunAverage(
            this in NativeArray<uint3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3x3> source,
            ref NativeArray<uint3x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x3> ScheduleAverage(
            this in NativeArray<uint3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint3x3<T, TSelector>
            : IFunc<NativeArray<T>, uint3x3>
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            readonly ValueFunc<T, uint3x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint3x3(ValueFunc<T, uint3x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint3x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3x3>.Struct<ArrayAverageSelectorFunc_uint3x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = new ArrayAverageSelectorFunc_uint3x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint3x3>.New(func);
        }

        public static uint3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector,
            ref NativeArray<uint3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint3x4 Average(this in NativeArray<uint3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint3x4
            : IFunc<NativeArray<uint3x4>, uint3x4>
        {
            public uint3x4 Invoke(NativeArray<uint3x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint3x4>, uint3x4>.Struct<ArrayAverageFunc_uint3x4>
        AverageAsFunc(
            this in NativeArray<uint3x4> source
            )
        {
            return ValueFunc<NativeArray<uint3x4>, uint3x4>.New<ArrayAverageFunc_uint3x4>();
        }

        public static uint3x4 RunAverage(
            this in NativeArray<uint3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3x4> source,
            ref NativeArray<uint3x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x4> ScheduleAverage(
            this in NativeArray<uint3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint3x4<T, TSelector>
            : IFunc<NativeArray<T>, uint3x4>
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            readonly ValueFunc<T, uint3x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint3x4(ValueFunc<T, uint3x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint3x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3x4>.Struct<ArrayAverageSelectorFunc_uint3x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = new ArrayAverageSelectorFunc_uint3x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint3x4>.New(func);
        }

        public static uint3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector,
            ref NativeArray<uint3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4 Average(this in NativeArray<uint4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint4
            : IFunc<NativeArray<uint4>, uint4>
        {
            public uint4 Invoke(NativeArray<uint4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint4>, uint4>.Struct<ArrayAverageFunc_uint4>
        AverageAsFunc(
            this in NativeArray<uint4> source
            )
        {
            return ValueFunc<NativeArray<uint4>, uint4>.New<ArrayAverageFunc_uint4>();
        }

        public static uint4 RunAverage(
            this in NativeArray<uint4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4> source,
            ref NativeArray<uint4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4> ScheduleAverage(
            this in NativeArray<uint4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint4<T, TSelector>
            : IFunc<NativeArray<T>, uint4>
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            readonly ValueFunc<T, uint4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint4(ValueFunc<T, uint4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4>.Struct<ArrayAverageSelectorFunc_uint4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = new ArrayAverageSelectorFunc_uint4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint4>.New(func);
        }

        public static uint4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector,
            ref NativeArray<uint4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4x2 Average(this in NativeArray<uint4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint4x2
            : IFunc<NativeArray<uint4x2>, uint4x2>
        {
            public uint4x2 Invoke(NativeArray<uint4x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint4x2>, uint4x2>.Struct<ArrayAverageFunc_uint4x2>
        AverageAsFunc(
            this in NativeArray<uint4x2> source
            )
        {
            return ValueFunc<NativeArray<uint4x2>, uint4x2>.New<ArrayAverageFunc_uint4x2>();
        }

        public static uint4x2 RunAverage(
            this in NativeArray<uint4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4x2> source,
            ref NativeArray<uint4x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x2> ScheduleAverage(
            this in NativeArray<uint4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint4x2<T, TSelector>
            : IFunc<NativeArray<T>, uint4x2>
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            readonly ValueFunc<T, uint4x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint4x2(ValueFunc<T, uint4x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint4x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4x2>.Struct<ArrayAverageSelectorFunc_uint4x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = new ArrayAverageSelectorFunc_uint4x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint4x2>.New(func);
        }

        public static uint4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector,
            ref NativeArray<uint4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4x3 Average(this in NativeArray<uint4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint4x3
            : IFunc<NativeArray<uint4x3>, uint4x3>
        {
            public uint4x3 Invoke(NativeArray<uint4x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint4x3>, uint4x3>.Struct<ArrayAverageFunc_uint4x3>
        AverageAsFunc(
            this in NativeArray<uint4x3> source
            )
        {
            return ValueFunc<NativeArray<uint4x3>, uint4x3>.New<ArrayAverageFunc_uint4x3>();
        }

        public static uint4x3 RunAverage(
            this in NativeArray<uint4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4x3> source,
            ref NativeArray<uint4x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x3> ScheduleAverage(
            this in NativeArray<uint4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint4x3<T, TSelector>
            : IFunc<NativeArray<T>, uint4x3>
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            readonly ValueFunc<T, uint4x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint4x3(ValueFunc<T, uint4x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint4x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4x3>.Struct<ArrayAverageSelectorFunc_uint4x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = new ArrayAverageSelectorFunc_uint4x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint4x3>.New(func);
        }

        public static uint4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector,
            ref NativeArray<uint4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static uint4x4 Average(this in NativeArray<uint4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageFunc_uint4x4
            : IFunc<NativeArray<uint4x4>, uint4x4>
        {
            public uint4x4 Invoke(NativeArray<uint4x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<uint4x4>, uint4x4>.Struct<ArrayAverageFunc_uint4x4>
        AverageAsFunc(
            this in NativeArray<uint4x4> source
            )
        {
            return ValueFunc<NativeArray<uint4x4>, uint4x4>.New<ArrayAverageFunc_uint4x4>();
        }

        public static uint4x4 RunAverage(
            this in NativeArray<uint4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4x4> source,
            ref NativeArray<uint4x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x4> ScheduleAverage(
            this in NativeArray<uint4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static uint4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public struct ArrayAverageSelectorFunc_uint4x4<T, TSelector>
            : IFunc<NativeArray<T>, uint4x4>
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            readonly ValueFunc<T, uint4x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_uint4x4(ValueFunc<T, uint4x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public uint4x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4x4>.Struct<ArrayAverageSelectorFunc_uint4x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = new ArrayAverageSelectorFunc_uint4x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, uint4x4>.New(func);
        }

        public static uint4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector,
            ref NativeArray<uint4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<uint4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float Average(this in NativeArray<float> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float
            : IFunc<NativeArray<float>, float>
        {
            public float Invoke(NativeArray<float> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float>, float>.Struct<ArrayAverageFunc_float>
        AverageAsFunc(
            this in NativeArray<float> source
            )
        {
            return ValueFunc<NativeArray<float>, float>.New<ArrayAverageFunc_float>();
        }

        public static float RunAverage(
            this in NativeArray<float> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float> source,
            ref NativeArray<float> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float> ScheduleAverage(
            this in NativeArray<float> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float<T, TSelector>
            : IFunc<NativeArray<T>, float>
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            readonly ValueFunc<T, float>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float(ValueFunc<T, float>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float>.Struct<ArrayAverageSelectorFunc_float<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = new ArrayAverageSelectorFunc_float<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float>.New(func);
        }

        public static float RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector,
            ref NativeArray<float> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2 Average(this in NativeArray<float2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float2
            : IFunc<NativeArray<float2>, float2>
        {
            public float2 Invoke(NativeArray<float2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float2>, float2>.Struct<ArrayAverageFunc_float2>
        AverageAsFunc(
            this in NativeArray<float2> source
            )
        {
            return ValueFunc<NativeArray<float2>, float2>.New<ArrayAverageFunc_float2>();
        }

        public static float2 RunAverage(
            this in NativeArray<float2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2> source,
            ref NativeArray<float2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2> ScheduleAverage(
            this in NativeArray<float2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float2<T, TSelector>
            : IFunc<NativeArray<T>, float2>
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            readonly ValueFunc<T, float2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float2(ValueFunc<T, float2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2>.Struct<ArrayAverageSelectorFunc_float2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = new ArrayAverageSelectorFunc_float2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float2>.New(func);
        }

        public static float2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector,
            ref NativeArray<float2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2x2 Average(this in NativeArray<float2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float2x2
            : IFunc<NativeArray<float2x2>, float2x2>
        {
            public float2x2 Invoke(NativeArray<float2x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float2x2>, float2x2>.Struct<ArrayAverageFunc_float2x2>
        AverageAsFunc(
            this in NativeArray<float2x2> source
            )
        {
            return ValueFunc<NativeArray<float2x2>, float2x2>.New<ArrayAverageFunc_float2x2>();
        }

        public static float2x2 RunAverage(
            this in NativeArray<float2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2x2> source,
            ref NativeArray<float2x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x2> ScheduleAverage(
            this in NativeArray<float2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float2x2<T, TSelector>
            : IFunc<NativeArray<T>, float2x2>
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            readonly ValueFunc<T, float2x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float2x2(ValueFunc<T, float2x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float2x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2x2>.Struct<ArrayAverageSelectorFunc_float2x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = new ArrayAverageSelectorFunc_float2x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float2x2>.New(func);
        }

        public static float2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector,
            ref NativeArray<float2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2x3 Average(this in NativeArray<float2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float2x3
            : IFunc<NativeArray<float2x3>, float2x3>
        {
            public float2x3 Invoke(NativeArray<float2x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float2x3>, float2x3>.Struct<ArrayAverageFunc_float2x3>
        AverageAsFunc(
            this in NativeArray<float2x3> source
            )
        {
            return ValueFunc<NativeArray<float2x3>, float2x3>.New<ArrayAverageFunc_float2x3>();
        }

        public static float2x3 RunAverage(
            this in NativeArray<float2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2x3> source,
            ref NativeArray<float2x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x3> ScheduleAverage(
            this in NativeArray<float2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float2x3<T, TSelector>
            : IFunc<NativeArray<T>, float2x3>
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            readonly ValueFunc<T, float2x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float2x3(ValueFunc<T, float2x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float2x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2x3>.Struct<ArrayAverageSelectorFunc_float2x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = new ArrayAverageSelectorFunc_float2x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float2x3>.New(func);
        }

        public static float2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector,
            ref NativeArray<float2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float2x4 Average(this in NativeArray<float2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float2x4
            : IFunc<NativeArray<float2x4>, float2x4>
        {
            public float2x4 Invoke(NativeArray<float2x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float2x4>, float2x4>.Struct<ArrayAverageFunc_float2x4>
        AverageAsFunc(
            this in NativeArray<float2x4> source
            )
        {
            return ValueFunc<NativeArray<float2x4>, float2x4>.New<ArrayAverageFunc_float2x4>();
        }

        public static float2x4 RunAverage(
            this in NativeArray<float2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2x4> source,
            ref NativeArray<float2x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x4> ScheduleAverage(
            this in NativeArray<float2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float2x4<T, TSelector>
            : IFunc<NativeArray<T>, float2x4>
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            readonly ValueFunc<T, float2x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float2x4(ValueFunc<T, float2x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float2x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2x4>.Struct<ArrayAverageSelectorFunc_float2x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = new ArrayAverageSelectorFunc_float2x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float2x4>.New(func);
        }

        public static float2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector,
            ref NativeArray<float2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3 Average(this in NativeArray<float3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float3
            : IFunc<NativeArray<float3>, float3>
        {
            public float3 Invoke(NativeArray<float3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float3>, float3>.Struct<ArrayAverageFunc_float3>
        AverageAsFunc(
            this in NativeArray<float3> source
            )
        {
            return ValueFunc<NativeArray<float3>, float3>.New<ArrayAverageFunc_float3>();
        }

        public static float3 RunAverage(
            this in NativeArray<float3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3> source,
            ref NativeArray<float3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3> ScheduleAverage(
            this in NativeArray<float3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float3<T, TSelector>
            : IFunc<NativeArray<T>, float3>
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            readonly ValueFunc<T, float3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float3(ValueFunc<T, float3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3>.Struct<ArrayAverageSelectorFunc_float3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = new ArrayAverageSelectorFunc_float3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float3>.New(func);
        }

        public static float3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector,
            ref NativeArray<float3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3x2 Average(this in NativeArray<float3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float3x2
            : IFunc<NativeArray<float3x2>, float3x2>
        {
            public float3x2 Invoke(NativeArray<float3x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float3x2>, float3x2>.Struct<ArrayAverageFunc_float3x2>
        AverageAsFunc(
            this in NativeArray<float3x2> source
            )
        {
            return ValueFunc<NativeArray<float3x2>, float3x2>.New<ArrayAverageFunc_float3x2>();
        }

        public static float3x2 RunAverage(
            this in NativeArray<float3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3x2> source,
            ref NativeArray<float3x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x2> ScheduleAverage(
            this in NativeArray<float3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float3x2<T, TSelector>
            : IFunc<NativeArray<T>, float3x2>
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            readonly ValueFunc<T, float3x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float3x2(ValueFunc<T, float3x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float3x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3x2>.Struct<ArrayAverageSelectorFunc_float3x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = new ArrayAverageSelectorFunc_float3x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float3x2>.New(func);
        }

        public static float3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector,
            ref NativeArray<float3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3x3 Average(this in NativeArray<float3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float3x3
            : IFunc<NativeArray<float3x3>, float3x3>
        {
            public float3x3 Invoke(NativeArray<float3x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float3x3>, float3x3>.Struct<ArrayAverageFunc_float3x3>
        AverageAsFunc(
            this in NativeArray<float3x3> source
            )
        {
            return ValueFunc<NativeArray<float3x3>, float3x3>.New<ArrayAverageFunc_float3x3>();
        }

        public static float3x3 RunAverage(
            this in NativeArray<float3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3x3> source,
            ref NativeArray<float3x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x3> ScheduleAverage(
            this in NativeArray<float3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float3x3<T, TSelector>
            : IFunc<NativeArray<T>, float3x3>
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            readonly ValueFunc<T, float3x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float3x3(ValueFunc<T, float3x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float3x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3x3>.Struct<ArrayAverageSelectorFunc_float3x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = new ArrayAverageSelectorFunc_float3x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float3x3>.New(func);
        }

        public static float3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector,
            ref NativeArray<float3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float3x4 Average(this in NativeArray<float3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float3x4
            : IFunc<NativeArray<float3x4>, float3x4>
        {
            public float3x4 Invoke(NativeArray<float3x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float3x4>, float3x4>.Struct<ArrayAverageFunc_float3x4>
        AverageAsFunc(
            this in NativeArray<float3x4> source
            )
        {
            return ValueFunc<NativeArray<float3x4>, float3x4>.New<ArrayAverageFunc_float3x4>();
        }

        public static float3x4 RunAverage(
            this in NativeArray<float3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3x4> source,
            ref NativeArray<float3x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x4> ScheduleAverage(
            this in NativeArray<float3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float3x4<T, TSelector>
            : IFunc<NativeArray<T>, float3x4>
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            readonly ValueFunc<T, float3x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float3x4(ValueFunc<T, float3x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float3x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3x4>.Struct<ArrayAverageSelectorFunc_float3x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = new ArrayAverageSelectorFunc_float3x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float3x4>.New(func);
        }

        public static float3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector,
            ref NativeArray<float3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4 Average(this in NativeArray<float4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float4
            : IFunc<NativeArray<float4>, float4>
        {
            public float4 Invoke(NativeArray<float4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float4>, float4>.Struct<ArrayAverageFunc_float4>
        AverageAsFunc(
            this in NativeArray<float4> source
            )
        {
            return ValueFunc<NativeArray<float4>, float4>.New<ArrayAverageFunc_float4>();
        }

        public static float4 RunAverage(
            this in NativeArray<float4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4> source,
            ref NativeArray<float4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4> ScheduleAverage(
            this in NativeArray<float4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float4<T, TSelector>
            : IFunc<NativeArray<T>, float4>
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            readonly ValueFunc<T, float4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float4(ValueFunc<T, float4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4>.Struct<ArrayAverageSelectorFunc_float4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = new ArrayAverageSelectorFunc_float4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float4>.New(func);
        }

        public static float4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector,
            ref NativeArray<float4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4x2 Average(this in NativeArray<float4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float4x2
            : IFunc<NativeArray<float4x2>, float4x2>
        {
            public float4x2 Invoke(NativeArray<float4x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float4x2>, float4x2>.Struct<ArrayAverageFunc_float4x2>
        AverageAsFunc(
            this in NativeArray<float4x2> source
            )
        {
            return ValueFunc<NativeArray<float4x2>, float4x2>.New<ArrayAverageFunc_float4x2>();
        }

        public static float4x2 RunAverage(
            this in NativeArray<float4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4x2> source,
            ref NativeArray<float4x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x2> ScheduleAverage(
            this in NativeArray<float4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float4x2<T, TSelector>
            : IFunc<NativeArray<T>, float4x2>
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            readonly ValueFunc<T, float4x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float4x2(ValueFunc<T, float4x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float4x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4x2>.Struct<ArrayAverageSelectorFunc_float4x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = new ArrayAverageSelectorFunc_float4x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float4x2>.New(func);
        }

        public static float4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector,
            ref NativeArray<float4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4x3 Average(this in NativeArray<float4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float4x3
            : IFunc<NativeArray<float4x3>, float4x3>
        {
            public float4x3 Invoke(NativeArray<float4x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float4x3>, float4x3>.Struct<ArrayAverageFunc_float4x3>
        AverageAsFunc(
            this in NativeArray<float4x3> source
            )
        {
            return ValueFunc<NativeArray<float4x3>, float4x3>.New<ArrayAverageFunc_float4x3>();
        }

        public static float4x3 RunAverage(
            this in NativeArray<float4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4x3> source,
            ref NativeArray<float4x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x3> ScheduleAverage(
            this in NativeArray<float4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float4x3<T, TSelector>
            : IFunc<NativeArray<T>, float4x3>
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            readonly ValueFunc<T, float4x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float4x3(ValueFunc<T, float4x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float4x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4x3>.Struct<ArrayAverageSelectorFunc_float4x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = new ArrayAverageSelectorFunc_float4x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float4x3>.New(func);
        }

        public static float4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector,
            ref NativeArray<float4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static float4x4 Average(this in NativeArray<float4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_float4x4
            : IFunc<NativeArray<float4x4>, float4x4>
        {
            public float4x4 Invoke(NativeArray<float4x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<float4x4>, float4x4>.Struct<ArrayAverageFunc_float4x4>
        AverageAsFunc(
            this in NativeArray<float4x4> source
            )
        {
            return ValueFunc<NativeArray<float4x4>, float4x4>.New<ArrayAverageFunc_float4x4>();
        }

        public static float4x4 RunAverage(
            this in NativeArray<float4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4x4> source,
            ref NativeArray<float4x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x4> ScheduleAverage(
            this in NativeArray<float4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static float4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_float4x4<T, TSelector>
            : IFunc<NativeArray<T>, float4x4>
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            readonly ValueFunc<T, float4x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_float4x4(ValueFunc<T, float4x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public float4x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4x4>.Struct<ArrayAverageSelectorFunc_float4x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = new ArrayAverageSelectorFunc_float4x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, float4x4>.New(func);
        }

        public static float4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector,
            ref NativeArray<float4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<float4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double Average(this in NativeArray<double> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double
            : IFunc<NativeArray<double>, double>
        {
            public double Invoke(NativeArray<double> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double>, double>.Struct<ArrayAverageFunc_double>
        AverageAsFunc(
            this in NativeArray<double> source
            )
        {
            return ValueFunc<NativeArray<double>, double>.New<ArrayAverageFunc_double>();
        }

        public static double RunAverage(
            this in NativeArray<double> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double> source,
            ref NativeArray<double> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double> ScheduleAverage(
            this in NativeArray<double> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double<T, TSelector>
            : IFunc<NativeArray<T>, double>
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            readonly ValueFunc<T, double>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double(ValueFunc<T, double>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double>.Struct<ArrayAverageSelectorFunc_double<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = new ArrayAverageSelectorFunc_double<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double>.New(func);
        }

        public static double RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector,
            ref NativeArray<double> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2 Average(this in NativeArray<double2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double2
            : IFunc<NativeArray<double2>, double2>
        {
            public double2 Invoke(NativeArray<double2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double2>, double2>.Struct<ArrayAverageFunc_double2>
        AverageAsFunc(
            this in NativeArray<double2> source
            )
        {
            return ValueFunc<NativeArray<double2>, double2>.New<ArrayAverageFunc_double2>();
        }

        public static double2 RunAverage(
            this in NativeArray<double2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2> source,
            ref NativeArray<double2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2> ScheduleAverage(
            this in NativeArray<double2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double2<T, TSelector>
            : IFunc<NativeArray<T>, double2>
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            readonly ValueFunc<T, double2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double2(ValueFunc<T, double2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2>.Struct<ArrayAverageSelectorFunc_double2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = new ArrayAverageSelectorFunc_double2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double2>.New(func);
        }

        public static double2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector,
            ref NativeArray<double2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2x2 Average(this in NativeArray<double2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double2x2
            : IFunc<NativeArray<double2x2>, double2x2>
        {
            public double2x2 Invoke(NativeArray<double2x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double2x2>, double2x2>.Struct<ArrayAverageFunc_double2x2>
        AverageAsFunc(
            this in NativeArray<double2x2> source
            )
        {
            return ValueFunc<NativeArray<double2x2>, double2x2>.New<ArrayAverageFunc_double2x2>();
        }

        public static double2x2 RunAverage(
            this in NativeArray<double2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2x2> source,
            ref NativeArray<double2x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x2> ScheduleAverage(
            this in NativeArray<double2x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double2x2<T, TSelector>
            : IFunc<NativeArray<T>, double2x2>
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            readonly ValueFunc<T, double2x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double2x2(ValueFunc<T, double2x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double2x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2x2>.Struct<ArrayAverageSelectorFunc_double2x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = new ArrayAverageSelectorFunc_double2x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double2x2>.New(func);
        }

        public static double2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector,
            ref NativeArray<double2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2x3 Average(this in NativeArray<double2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double2x3
            : IFunc<NativeArray<double2x3>, double2x3>
        {
            public double2x3 Invoke(NativeArray<double2x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double2x3>, double2x3>.Struct<ArrayAverageFunc_double2x3>
        AverageAsFunc(
            this in NativeArray<double2x3> source
            )
        {
            return ValueFunc<NativeArray<double2x3>, double2x3>.New<ArrayAverageFunc_double2x3>();
        }

        public static double2x3 RunAverage(
            this in NativeArray<double2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2x3> source,
            ref NativeArray<double2x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x3> ScheduleAverage(
            this in NativeArray<double2x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double2x3<T, TSelector>
            : IFunc<NativeArray<T>, double2x3>
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            readonly ValueFunc<T, double2x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double2x3(ValueFunc<T, double2x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double2x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2x3>.Struct<ArrayAverageSelectorFunc_double2x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = new ArrayAverageSelectorFunc_double2x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double2x3>.New(func);
        }

        public static double2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector,
            ref NativeArray<double2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double2x4 Average(this in NativeArray<double2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double2x4
            : IFunc<NativeArray<double2x4>, double2x4>
        {
            public double2x4 Invoke(NativeArray<double2x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double2x4>, double2x4>.Struct<ArrayAverageFunc_double2x4>
        AverageAsFunc(
            this in NativeArray<double2x4> source
            )
        {
            return ValueFunc<NativeArray<double2x4>, double2x4>.New<ArrayAverageFunc_double2x4>();
        }

        public static double2x4 RunAverage(
            this in NativeArray<double2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2x4> source,
            ref NativeArray<double2x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x4> ScheduleAverage(
            this in NativeArray<double2x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double2x4<T, TSelector>
            : IFunc<NativeArray<T>, double2x4>
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            readonly ValueFunc<T, double2x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double2x4(ValueFunc<T, double2x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double2x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2x4>.Struct<ArrayAverageSelectorFunc_double2x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = new ArrayAverageSelectorFunc_double2x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double2x4>.New(func);
        }

        public static double2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector,
            ref NativeArray<double2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3 Average(this in NativeArray<double3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double3
            : IFunc<NativeArray<double3>, double3>
        {
            public double3 Invoke(NativeArray<double3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double3>, double3>.Struct<ArrayAverageFunc_double3>
        AverageAsFunc(
            this in NativeArray<double3> source
            )
        {
            return ValueFunc<NativeArray<double3>, double3>.New<ArrayAverageFunc_double3>();
        }

        public static double3 RunAverage(
            this in NativeArray<double3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3> source,
            ref NativeArray<double3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3> ScheduleAverage(
            this in NativeArray<double3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double3<T, TSelector>
            : IFunc<NativeArray<T>, double3>
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            readonly ValueFunc<T, double3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double3(ValueFunc<T, double3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3>.Struct<ArrayAverageSelectorFunc_double3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = new ArrayAverageSelectorFunc_double3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double3>.New(func);
        }

        public static double3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector,
            ref NativeArray<double3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3x2 Average(this in NativeArray<double3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double3x2
            : IFunc<NativeArray<double3x2>, double3x2>
        {
            public double3x2 Invoke(NativeArray<double3x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double3x2>, double3x2>.Struct<ArrayAverageFunc_double3x2>
        AverageAsFunc(
            this in NativeArray<double3x2> source
            )
        {
            return ValueFunc<NativeArray<double3x2>, double3x2>.New<ArrayAverageFunc_double3x2>();
        }

        public static double3x2 RunAverage(
            this in NativeArray<double3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3x2> source,
            ref NativeArray<double3x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x2> ScheduleAverage(
            this in NativeArray<double3x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double3x2<T, TSelector>
            : IFunc<NativeArray<T>, double3x2>
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            readonly ValueFunc<T, double3x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double3x2(ValueFunc<T, double3x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double3x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3x2>.Struct<ArrayAverageSelectorFunc_double3x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = new ArrayAverageSelectorFunc_double3x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double3x2>.New(func);
        }

        public static double3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector,
            ref NativeArray<double3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3x3 Average(this in NativeArray<double3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double3x3
            : IFunc<NativeArray<double3x3>, double3x3>
        {
            public double3x3 Invoke(NativeArray<double3x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double3x3>, double3x3>.Struct<ArrayAverageFunc_double3x3>
        AverageAsFunc(
            this in NativeArray<double3x3> source
            )
        {
            return ValueFunc<NativeArray<double3x3>, double3x3>.New<ArrayAverageFunc_double3x3>();
        }

        public static double3x3 RunAverage(
            this in NativeArray<double3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3x3> source,
            ref NativeArray<double3x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x3> ScheduleAverage(
            this in NativeArray<double3x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double3x3<T, TSelector>
            : IFunc<NativeArray<T>, double3x3>
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            readonly ValueFunc<T, double3x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double3x3(ValueFunc<T, double3x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double3x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3x3>.Struct<ArrayAverageSelectorFunc_double3x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = new ArrayAverageSelectorFunc_double3x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double3x3>.New(func);
        }

        public static double3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector,
            ref NativeArray<double3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double3x4 Average(this in NativeArray<double3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double3x4
            : IFunc<NativeArray<double3x4>, double3x4>
        {
            public double3x4 Invoke(NativeArray<double3x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double3x4>, double3x4>.Struct<ArrayAverageFunc_double3x4>
        AverageAsFunc(
            this in NativeArray<double3x4> source
            )
        {
            return ValueFunc<NativeArray<double3x4>, double3x4>.New<ArrayAverageFunc_double3x4>();
        }

        public static double3x4 RunAverage(
            this in NativeArray<double3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3x4> source,
            ref NativeArray<double3x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x4> ScheduleAverage(
            this in NativeArray<double3x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double3x4<T, TSelector>
            : IFunc<NativeArray<T>, double3x4>
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            readonly ValueFunc<T, double3x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double3x4(ValueFunc<T, double3x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double3x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3x4>.Struct<ArrayAverageSelectorFunc_double3x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = new ArrayAverageSelectorFunc_double3x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double3x4>.New(func);
        }

        public static double3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector,
            ref NativeArray<double3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4 Average(this in NativeArray<double4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double4
            : IFunc<NativeArray<double4>, double4>
        {
            public double4 Invoke(NativeArray<double4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double4>, double4>.Struct<ArrayAverageFunc_double4>
        AverageAsFunc(
            this in NativeArray<double4> source
            )
        {
            return ValueFunc<NativeArray<double4>, double4>.New<ArrayAverageFunc_double4>();
        }

        public static double4 RunAverage(
            this in NativeArray<double4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4> source,
            ref NativeArray<double4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4> ScheduleAverage(
            this in NativeArray<double4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double4<T, TSelector>
            : IFunc<NativeArray<T>, double4>
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            readonly ValueFunc<T, double4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double4(ValueFunc<T, double4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4>.Struct<ArrayAverageSelectorFunc_double4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = new ArrayAverageSelectorFunc_double4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double4>.New(func);
        }

        public static double4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector,
            ref NativeArray<double4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4x2 Average(this in NativeArray<double4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double4x2
            : IFunc<NativeArray<double4x2>, double4x2>
        {
            public double4x2 Invoke(NativeArray<double4x2> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double4x2>, double4x2>.Struct<ArrayAverageFunc_double4x2>
        AverageAsFunc(
            this in NativeArray<double4x2> source
            )
        {
            return ValueFunc<NativeArray<double4x2>, double4x2>.New<ArrayAverageFunc_double4x2>();
        }

        public static double4x2 RunAverage(
            this in NativeArray<double4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4x2> source,
            ref NativeArray<double4x2> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x2> ScheduleAverage(
            this in NativeArray<double4x2> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double4x2<T, TSelector>
            : IFunc<NativeArray<T>, double4x2>
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            readonly ValueFunc<T, double4x2>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double4x2(ValueFunc<T, double4x2>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double4x2 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4x2>.Struct<ArrayAverageSelectorFunc_double4x2<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = new ArrayAverageSelectorFunc_double4x2<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double4x2>.New(func);
        }

        public static double4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector,
            ref NativeArray<double4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4x3 Average(this in NativeArray<double4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double4x3
            : IFunc<NativeArray<double4x3>, double4x3>
        {
            public double4x3 Invoke(NativeArray<double4x3> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double4x3>, double4x3>.Struct<ArrayAverageFunc_double4x3>
        AverageAsFunc(
            this in NativeArray<double4x3> source
            )
        {
            return ValueFunc<NativeArray<double4x3>, double4x3>.New<ArrayAverageFunc_double4x3>();
        }

        public static double4x3 RunAverage(
            this in NativeArray<double4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4x3> source,
            ref NativeArray<double4x3> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x3> ScheduleAverage(
            this in NativeArray<double4x3> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double4x3<T, TSelector>
            : IFunc<NativeArray<T>, double4x3>
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            readonly ValueFunc<T, double4x3>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double4x3(ValueFunc<T, double4x3>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double4x3 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4x3>.Struct<ArrayAverageSelectorFunc_double4x3<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = new ArrayAverageSelectorFunc_double4x3<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double4x3>.New(func);
        }

        public static double4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector,
            ref NativeArray<double4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


        public static double4x4 Average(this in NativeArray<double4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public struct ArrayAverageFunc_double4x4
            : IFunc<NativeArray<double4x4>, double4x4>
        {
            public double4x4 Invoke(NativeArray<double4x4> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<double4x4>, double4x4>.Struct<ArrayAverageFunc_double4x4>
        AverageAsFunc(
            this in NativeArray<double4x4> source
            )
        {
            return ValueFunc<NativeArray<double4x4>, double4x4>.New<ArrayAverageFunc_double4x4>();
        }

        public static double4x4 RunAverage(
            this in NativeArray<double4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4x4> source,
            ref NativeArray<double4x4> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x4> ScheduleAverage(
            this in NativeArray<double4x4> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static double4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public struct ArrayAverageSelectorFunc_double4x4<T, TSelector>
            : IFunc<NativeArray<T>, double4x4>
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            readonly ValueFunc<T, double4x4>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_double4x4(ValueFunc<T, double4x4>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public double4x4 Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4x4>.Struct<ArrayAverageSelectorFunc_double4x4<T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = new ArrayAverageSelectorFunc_double4x4<T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, double4x4>.New(func);
        }

        public static double4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector,
            ref NativeArray<double4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<double4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }


    }
}
