//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {
        public static int Average(this in NativeArray<int> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int RunAverage(
            this in NativeArray<int> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int> source,
            ref NativeArray<int> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int> ScheduleAverage(
            this in NativeArray<int> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector,
            ref NativeArray<int> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int2 Average(this in NativeArray<int2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int2 RunAverage(
            this in NativeArray<int2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2> source,
            ref NativeArray<int2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int2> ScheduleAverage(
            this in NativeArray<int2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector,
            ref NativeArray<int2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int2x2 Average(this in NativeArray<int2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int2x2 RunAverage(
            this in NativeArray<int2x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2x2> source,
            ref NativeArray<int2x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int2x2> ScheduleAverage(
            this in NativeArray<int2x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector,
            ref NativeArray<int2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int2x3 Average(this in NativeArray<int2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int2x3 RunAverage(
            this in NativeArray<int2x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2x3> source,
            ref NativeArray<int2x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int2x3> ScheduleAverage(
            this in NativeArray<int2x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector,
            ref NativeArray<int2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int2x4 Average(this in NativeArray<int2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int2x4 RunAverage(
            this in NativeArray<int2x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int2x4> source,
            ref NativeArray<int2x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int2x4> ScheduleAverage(
            this in NativeArray<int2x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector,
            ref NativeArray<int2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int3 Average(this in NativeArray<int3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int3 RunAverage(
            this in NativeArray<int3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3> source,
            ref NativeArray<int3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int3> ScheduleAverage(
            this in NativeArray<int3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector,
            ref NativeArray<int3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int3x2 Average(this in NativeArray<int3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int3x2 RunAverage(
            this in NativeArray<int3x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3x2> source,
            ref NativeArray<int3x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int3x2> ScheduleAverage(
            this in NativeArray<int3x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector,
            ref NativeArray<int3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int3x3 Average(this in NativeArray<int3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int3x3 RunAverage(
            this in NativeArray<int3x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3x3> source,
            ref NativeArray<int3x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int3x3> ScheduleAverage(
            this in NativeArray<int3x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector,
            ref NativeArray<int3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int3x4 Average(this in NativeArray<int3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int3x4 RunAverage(
            this in NativeArray<int3x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int3x4> source,
            ref NativeArray<int3x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int3x4> ScheduleAverage(
            this in NativeArray<int3x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector,
            ref NativeArray<int3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int4 Average(this in NativeArray<int4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int4 RunAverage(
            this in NativeArray<int4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4> source,
            ref NativeArray<int4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int4> ScheduleAverage(
            this in NativeArray<int4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector,
            ref NativeArray<int4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int4x2 Average(this in NativeArray<int4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int4x2 RunAverage(
            this in NativeArray<int4x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4x2> source,
            ref NativeArray<int4x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int4x2> ScheduleAverage(
            this in NativeArray<int4x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector,
            ref NativeArray<int4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int4x3 Average(this in NativeArray<int4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int4x3 RunAverage(
            this in NativeArray<int4x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4x3> source,
            ref NativeArray<int4x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int4x3> ScheduleAverage(
            this in NativeArray<int4x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector,
            ref NativeArray<int4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static int4x4 Average(this in NativeArray<int4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static int4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static int4x4 RunAverage(
            this in NativeArray<int4x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<int4x4> source,
            ref NativeArray<int4x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<int4x4> ScheduleAverage(
            this in NativeArray<int4x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static int4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector,
            ref NativeArray<int4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<int4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint Average(this in NativeArray<uint> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint RunAverage(
            this in NativeArray<uint> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint> source,
            ref NativeArray<uint> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint> ScheduleAverage(
            this in NativeArray<uint> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector,
            ref NativeArray<uint> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint2 Average(this in NativeArray<uint2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint2 RunAverage(
            this in NativeArray<uint2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2> source,
            ref NativeArray<uint2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint2> ScheduleAverage(
            this in NativeArray<uint2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector,
            ref NativeArray<uint2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint2x2 Average(this in NativeArray<uint2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint2x2 RunAverage(
            this in NativeArray<uint2x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2x2> source,
            ref NativeArray<uint2x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint2x2> ScheduleAverage(
            this in NativeArray<uint2x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector,
            ref NativeArray<uint2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint2x3 Average(this in NativeArray<uint2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint2x3 RunAverage(
            this in NativeArray<uint2x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2x3> source,
            ref NativeArray<uint2x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint2x3> ScheduleAverage(
            this in NativeArray<uint2x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector,
            ref NativeArray<uint2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint2x4 Average(this in NativeArray<uint2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint2x4 RunAverage(
            this in NativeArray<uint2x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint2x4> source,
            ref NativeArray<uint2x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint2x4> ScheduleAverage(
            this in NativeArray<uint2x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector,
            ref NativeArray<uint2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint3 Average(this in NativeArray<uint3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint3 RunAverage(
            this in NativeArray<uint3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3> source,
            ref NativeArray<uint3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint3> ScheduleAverage(
            this in NativeArray<uint3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector,
            ref NativeArray<uint3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint3x2 Average(this in NativeArray<uint3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint3x2 RunAverage(
            this in NativeArray<uint3x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3x2> source,
            ref NativeArray<uint3x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint3x2> ScheduleAverage(
            this in NativeArray<uint3x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector,
            ref NativeArray<uint3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint3x3 Average(this in NativeArray<uint3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint3x3 RunAverage(
            this in NativeArray<uint3x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3x3> source,
            ref NativeArray<uint3x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint3x3> ScheduleAverage(
            this in NativeArray<uint3x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector,
            ref NativeArray<uint3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint3x4 Average(this in NativeArray<uint3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint3x4 RunAverage(
            this in NativeArray<uint3x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint3x4> source,
            ref NativeArray<uint3x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint3x4> ScheduleAverage(
            this in NativeArray<uint3x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector,
            ref NativeArray<uint3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint4 Average(this in NativeArray<uint4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint4 RunAverage(
            this in NativeArray<uint4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4> source,
            ref NativeArray<uint4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint4> ScheduleAverage(
            this in NativeArray<uint4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector,
            ref NativeArray<uint4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint4x2 Average(this in NativeArray<uint4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint4x2 RunAverage(
            this in NativeArray<uint4x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4x2> source,
            ref NativeArray<uint4x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint4x2> ScheduleAverage(
            this in NativeArray<uint4x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector,
            ref NativeArray<uint4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint4x3 Average(this in NativeArray<uint4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint4x3 RunAverage(
            this in NativeArray<uint4x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4x3> source,
            ref NativeArray<uint4x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint4x3> ScheduleAverage(
            this in NativeArray<uint4x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector,
            ref NativeArray<uint4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static uint4x4 Average(this in NativeArray<uint4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / (uint)source.Length;
        }

        public static uint4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / (uint)source.Length;
        }

        public static uint4x4 RunAverage(
            this in NativeArray<uint4x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<uint4x4> source,
            ref NativeArray<uint4x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<uint4x4> ScheduleAverage(
            this in NativeArray<uint4x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static uint4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector,
            ref NativeArray<uint4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<uint4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float Average(this in NativeArray<float> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float RunAverage(
            this in NativeArray<float> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float> source,
            ref NativeArray<float> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float> ScheduleAverage(
            this in NativeArray<float> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector,
            ref NativeArray<float> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float2 Average(this in NativeArray<float2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float2 RunAverage(
            this in NativeArray<float2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2> source,
            ref NativeArray<float2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float2> ScheduleAverage(
            this in NativeArray<float2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector,
            ref NativeArray<float2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float2x2 Average(this in NativeArray<float2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float2x2 RunAverage(
            this in NativeArray<float2x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2x2> source,
            ref NativeArray<float2x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float2x2> ScheduleAverage(
            this in NativeArray<float2x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector,
            ref NativeArray<float2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float2x3 Average(this in NativeArray<float2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float2x3 RunAverage(
            this in NativeArray<float2x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2x3> source,
            ref NativeArray<float2x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float2x3> ScheduleAverage(
            this in NativeArray<float2x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector,
            ref NativeArray<float2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float2x4 Average(this in NativeArray<float2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float2x4 RunAverage(
            this in NativeArray<float2x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float2x4> source,
            ref NativeArray<float2x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float2x4> ScheduleAverage(
            this in NativeArray<float2x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector,
            ref NativeArray<float2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float3 Average(this in NativeArray<float3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float3 RunAverage(
            this in NativeArray<float3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3> source,
            ref NativeArray<float3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float3> ScheduleAverage(
            this in NativeArray<float3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector,
            ref NativeArray<float3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float3x2 Average(this in NativeArray<float3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float3x2 RunAverage(
            this in NativeArray<float3x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3x2> source,
            ref NativeArray<float3x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float3x2> ScheduleAverage(
            this in NativeArray<float3x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector,
            ref NativeArray<float3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float3x3 Average(this in NativeArray<float3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float3x3 RunAverage(
            this in NativeArray<float3x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3x3> source,
            ref NativeArray<float3x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float3x3> ScheduleAverage(
            this in NativeArray<float3x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector,
            ref NativeArray<float3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float3x4 Average(this in NativeArray<float3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float3x4 RunAverage(
            this in NativeArray<float3x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float3x4> source,
            ref NativeArray<float3x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float3x4> ScheduleAverage(
            this in NativeArray<float3x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector,
            ref NativeArray<float3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float4 Average(this in NativeArray<float4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float4 RunAverage(
            this in NativeArray<float4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4> source,
            ref NativeArray<float4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float4> ScheduleAverage(
            this in NativeArray<float4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector,
            ref NativeArray<float4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float4x2 Average(this in NativeArray<float4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float4x2 RunAverage(
            this in NativeArray<float4x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4x2> source,
            ref NativeArray<float4x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float4x2> ScheduleAverage(
            this in NativeArray<float4x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector,
            ref NativeArray<float4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float4x3 Average(this in NativeArray<float4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float4x3 RunAverage(
            this in NativeArray<float4x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4x3> source,
            ref NativeArray<float4x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float4x3> ScheduleAverage(
            this in NativeArray<float4x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector,
            ref NativeArray<float4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static float4x4 Average(this in NativeArray<float4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static float4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static float4x4 RunAverage(
            this in NativeArray<float4x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<float4x4> source,
            ref NativeArray<float4x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<float4x4> ScheduleAverage(
            this in NativeArray<float4x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static float4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector,
            ref NativeArray<float4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<float4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double Average(this in NativeArray<double> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double RunAverage(
            this in NativeArray<double> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double> source,
            ref NativeArray<double> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double> ScheduleAverage(
            this in NativeArray<double> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector,
            ref NativeArray<double> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double2 Average(this in NativeArray<double2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double2 RunAverage(
            this in NativeArray<double2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2> source,
            ref NativeArray<double2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double2> ScheduleAverage(
            this in NativeArray<double2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector,
            ref NativeArray<double2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double2x2 Average(this in NativeArray<double2x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double2x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double2x2 RunAverage(
            this in NativeArray<double2x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2x2> source,
            ref NativeArray<double2x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double2x2> ScheduleAverage(
            this in NativeArray<double2x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double2x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector,
            ref NativeArray<double2x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double2x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double2x3 Average(this in NativeArray<double2x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double2x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double2x3 RunAverage(
            this in NativeArray<double2x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2x3> source,
            ref NativeArray<double2x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double2x3> ScheduleAverage(
            this in NativeArray<double2x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double2x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector,
            ref NativeArray<double2x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double2x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double2x4 Average(this in NativeArray<double2x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double2x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double2x4 RunAverage(
            this in NativeArray<double2x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double2x4> source,
            ref NativeArray<double2x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double2x4> ScheduleAverage(
            this in NativeArray<double2x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double2x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector,
            ref NativeArray<double2x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double2x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double3 Average(this in NativeArray<double3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double3 RunAverage(
            this in NativeArray<double3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3> source,
            ref NativeArray<double3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double3> ScheduleAverage(
            this in NativeArray<double3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector,
            ref NativeArray<double3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double3x2 Average(this in NativeArray<double3x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double3x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double3x2 RunAverage(
            this in NativeArray<double3x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3x2> source,
            ref NativeArray<double3x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double3x2> ScheduleAverage(
            this in NativeArray<double3x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double3x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector,
            ref NativeArray<double3x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double3x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double3x3 Average(this in NativeArray<double3x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double3x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double3x3 RunAverage(
            this in NativeArray<double3x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3x3> source,
            ref NativeArray<double3x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double3x3> ScheduleAverage(
            this in NativeArray<double3x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double3x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector,
            ref NativeArray<double3x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double3x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double3x4 Average(this in NativeArray<double3x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double3x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double3x4 RunAverage(
            this in NativeArray<double3x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double3x4> source,
            ref NativeArray<double3x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double3x4> ScheduleAverage(
            this in NativeArray<double3x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double3x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector,
            ref NativeArray<double3x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double3x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double4 Average(this in NativeArray<double4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double4 RunAverage(
            this in NativeArray<double4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4> source,
            ref NativeArray<double4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double4> ScheduleAverage(
            this in NativeArray<double4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector,
            ref NativeArray<double4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double4x2 Average(this in NativeArray<double4x2> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double4x2 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double4x2 RunAverage(
            this in NativeArray<double4x2> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4x2> source,
            ref NativeArray<double4x2> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double4x2> ScheduleAverage(
            this in NativeArray<double4x2> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double4x2 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector,
            ref NativeArray<double4x2> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double4x2> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double4x3 Average(this in NativeArray<double4x3> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double4x3 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double4x3 RunAverage(
            this in NativeArray<double4x3> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4x3> source,
            ref NativeArray<double4x3> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double4x3> ScheduleAverage(
            this in NativeArray<double4x3> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double4x3 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector,
            ref NativeArray<double4x3> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double4x3> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

        public static double4x4 Average(this in NativeArray<double4x4> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / source.Length;
        }

        public static double4x4 Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / source.Length;
        }

        public static double4x4 RunAverage(
            this in NativeArray<double4x4> source
            )
        {
            return source.ToValueSequence().RunAverage();
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<double4x4> source,
            ref NativeArray<double4x4> output
            )
        {
            return source.ToValueSequence().ScheduleAverage(ref output);
        }

        public static Sequence.JobHandle<double4x4> ScheduleAverage(
            this in NativeArray<double4x4> source
            )
        {
            return source.ToValueSequence().ScheduleAverage();
        }

        public static double4x4 RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            return source.ToValueSequence().RunAverage(selector);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector,
            ref NativeArray<double4x4> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector, ref output);
        }

        public static Sequence.JobHandle<double4x4> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            return source.ToValueSequence().ScheduleAverage(selector);
        }

    }
}
