<#@ assembly name="System.Core" #>
<#@ output extension=".gen.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {
<#
var TYPES = new[] { "int", "uint", "float", "double" };
foreach (string TYPE in TYPES)
{
    for (var i = 1; i<= 4; i++)
    {
        for (var j = 1; j <= 4; j++)
        {
            string NUM1 = i == 1 ? "" : i.ToString();
            if (i == 1 && j > 1) break;
            string SEP = j == 1 ? "" : "x";
            string NUM2 = j == 1 ? "" : j.ToString();
            string TYPE_FULL = $"{TYPE}{NUM1}{SEP}{NUM2}";
            string UINT_CAST = TYPE == "uint" ? "(uint)" : "";
#>
        public static <#=TYPE_FULL#> Average(this in NativeArray<<#=TYPE_FULL#>> source)
        {
            if (source.Length == 0) throw Error.NoElements();
            <#=TYPE_FULL#> sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum / <#=UINT_CAST#>source.Length;
        }

        public struct ArrayAverageFunc_<#=TYPE_FULL#>
            : IFunc<NativeArray<<#=TYPE_FULL#>>, <#=TYPE_FULL#>>
        {
            public <#=TYPE_FULL#> Invoke(NativeArray<<#=TYPE_FULL#>> seq)
            {
                return seq.Average();
            }
        }

        public static ValueFunc<NativeArray<<#=TYPE_FULL#>>, <#=TYPE_FULL#>>.Struct<ArrayAverageFunc_<#=TYPE_FULL#>>
        AverageAsFunc(
            this in NativeArray<<#=TYPE_FULL#>> source
            )
        {
            return ValueFunc<NativeArray<<#=TYPE_FULL#>>, <#=TYPE_FULL#>>.New<ArrayAverageFunc_<#=TYPE_FULL#>>();
        }

        public static <#=TYPE_FULL#> RunAverage(
            this in NativeArray<<#=TYPE_FULL#>> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage(
            this in NativeArray<<#=TYPE_FULL#>> source,
            ref NativeArray<<#=TYPE_FULL#>> output
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func, ref output);
        }

        public static JobHandle<<#=TYPE_FULL#>> ScheduleAverage(
            this in NativeArray<<#=TYPE_FULL#>> source
            )
        {
            var func = source.AverageAsFunc();
            return source.Schedule(func);
        }


        public static <#=TYPE_FULL#> Average<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            if (source.Length == 0) throw Error.NoElements();
            <#=TYPE_FULL#> sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum / <#=UINT_CAST#>source.Length;
        }

        public struct ArrayAverageSelectorFunc_<#=TYPE_FULL#><T, TSelector>
            : IFunc<NativeArray<T>, <#=TYPE_FULL#>>
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            readonly ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector;

            public ArrayAverageSelectorFunc_<#=TYPE_FULL#>(ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector)
            {
                this.selector = selector;
            }

            public <#=TYPE_FULL#> Invoke(NativeArray<T> seq)
            {
                return seq.Average(selector);
            }
        }

        public static ValueFunc<NativeArray<T>, <#=TYPE_FULL#>>.Struct<ArrayAverageSelectorFunc_<#=TYPE_FULL#><T, TSelector>>
        AverageAsFunc<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            var func = new ArrayAverageSelectorFunc_<#=TYPE_FULL#><T, TSelector>(selector);
            return ValueFunc<NativeArray<T>, <#=TYPE_FULL#>>.New(func);
        }

        public static <#=TYPE_FULL#> RunAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            var func = source.AverageAsFunc(selector);
            return source.Run(func);
        }

        public static JobHandle ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector,
            ref NativeArray<<#=TYPE_FULL#>> output
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func, ref output);
        }

        public static JobHandle<<#=TYPE_FULL#>> ScheduleAverage<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            var func = source.AverageAsFunc(selector);
            return source.Schedule(func);
        }

<#
        }
    }
}
#>
    }
}
