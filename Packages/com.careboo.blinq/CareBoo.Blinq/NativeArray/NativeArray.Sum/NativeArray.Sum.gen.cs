//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Mathematics;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {
        public static int Sum(
            this ref NativeArray<int> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int2 Sum(
            this ref NativeArray<int2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int2x2 Sum(
            this ref NativeArray<int2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int2x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int2x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int2x3 Sum(
            this ref NativeArray<int2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int2x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int2x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int2x4 Sum(
            this ref NativeArray<int2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int2x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int2x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int3 Sum(
            this ref NativeArray<int3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int3x2 Sum(
            this ref NativeArray<int3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int3x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int3x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int3x3 Sum(
            this ref NativeArray<int3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int3x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int3x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int3x4 Sum(
            this ref NativeArray<int3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int3x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int3x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int4 Sum(
            this ref NativeArray<int4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int4x2 Sum(
            this ref NativeArray<int4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int4x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int4x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int4x3 Sum(
            this ref NativeArray<int4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int4x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int4x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static int4x4 Sum(
            this ref NativeArray<int4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static int4x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, int4x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint Sum(
            this ref NativeArray<uint> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint2 Sum(
            this ref NativeArray<uint2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint2x2 Sum(
            this ref NativeArray<uint2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint2x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint2x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint2x3 Sum(
            this ref NativeArray<uint2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint2x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint2x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint2x4 Sum(
            this ref NativeArray<uint2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint2x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint2x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint3 Sum(
            this ref NativeArray<uint3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint3x2 Sum(
            this ref NativeArray<uint3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint3x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint3x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint3x3 Sum(
            this ref NativeArray<uint3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint3x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint3x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint3x4 Sum(
            this ref NativeArray<uint3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint3x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint3x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint4 Sum(
            this ref NativeArray<uint4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint4x2 Sum(
            this ref NativeArray<uint4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint4x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint4x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint4x3 Sum(
            this ref NativeArray<uint4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint4x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint4x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static uint4x4 Sum(
            this ref NativeArray<uint4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static uint4x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, uint4x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float Sum(
            this ref NativeArray<float> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float2 Sum(
            this ref NativeArray<float2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float2x2 Sum(
            this ref NativeArray<float2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float2x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float2x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float2x3 Sum(
            this ref NativeArray<float2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float2x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float2x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float2x4 Sum(
            this ref NativeArray<float2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float2x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float2x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float3 Sum(
            this ref NativeArray<float3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float3x2 Sum(
            this ref NativeArray<float3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float3x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float3x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float3x3 Sum(
            this ref NativeArray<float3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float3x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float3x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float3x4 Sum(
            this ref NativeArray<float3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float3x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float3x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float4 Sum(
            this ref NativeArray<float4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float4x2 Sum(
            this ref NativeArray<float4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float4x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float4x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float4x3 Sum(
            this ref NativeArray<float4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float4x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float4x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static float4x4 Sum(
            this ref NativeArray<float4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static float4x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, float4x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double Sum(
            this ref NativeArray<double> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double2 Sum(
            this ref NativeArray<double2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double2x2 Sum(
            this ref NativeArray<double2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double2x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double2x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double2x3 Sum(
            this ref NativeArray<double2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double2x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double2x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double2x4 Sum(
            this ref NativeArray<double2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double2x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double2x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double3 Sum(
            this ref NativeArray<double3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double3x2 Sum(
            this ref NativeArray<double3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double3x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double3x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double3x3 Sum(
            this ref NativeArray<double3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double3x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double3x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double3x4 Sum(
            this ref NativeArray<double3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double3x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double3x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double4 Sum(
            this ref NativeArray<double4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double4x2 Sum(
            this ref NativeArray<double4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double4x2 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double4x2>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double4x3 Sum(
            this ref NativeArray<double4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double4x3 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double4x3>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public static double4x4 Sum(
            this ref NativeArray<double4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public static double4x4 Sum<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, double4x4>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

    }
}
