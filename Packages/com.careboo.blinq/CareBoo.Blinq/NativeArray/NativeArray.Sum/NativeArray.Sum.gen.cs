

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using CareBoo.Burst.Delegates;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {

        public static int Sum(
            this in NativeArray<int> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int : IFunc<NativeArray<int>, int>
        {
            public int Invoke(NativeArray<int> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int>, int>.Struct<ArraySumFunc_int>
        NewArraySumFunc_int(
            this in NativeArray<int> source
            )
        {
            return ValueFunc<NativeArray<int>, int>.New<ArraySumFunc_int>();
        }

        public static int RunSum(
            this in NativeArray<int> source
            )
        {
            var func = source.NewArraySumFunc_int();
            return source.Run(func);
        }

        public static JobHandle<int> ScheduleSum(
            this in NativeArray<int> source
            )
        {
            var func = source.NewArraySumFunc_int();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int> source,
            ref NativeArray<int> output
            )
        {
            var func = source.NewArraySumFunc_int();
            return source.Schedule(func, ref output);
        }

        public static int Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            if (source.Length == 0) throw Error.NoElements();
            int sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int<T, TSelector> : IFunc<NativeArray<T>, int>
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            public ValueFunc<T, int>.Struct<TSelector> Selector;

            public int Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int>.Struct<ArraySumFunc_int<T, TSelector>>
        NewArraySumFunc_int<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var structFunc = new ArraySumFunc_int<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int>.New<ArraySumFunc_int<T, TSelector>>(structFunc);
        }

        public static int RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.NewArraySumFunc_int(selector);
            return source.Run(func);
        }

        public static JobHandle<int> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.NewArraySumFunc_int(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int> output,
            ValueFunc<T, int>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int>
        {
            var func = source.NewArraySumFunc_int(selector);
            return source.Schedule(func, ref output);
        }


        public static int2 Sum(
            this in NativeArray<int2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int2 : IFunc<NativeArray<int2>, int2>
        {
            public int2 Invoke(NativeArray<int2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int2>, int2>.Struct<ArraySumFunc_int2>
        NewArraySumFunc_int2(
            this in NativeArray<int2> source
            )
        {
            return ValueFunc<NativeArray<int2>, int2>.New<ArraySumFunc_int2>();
        }

        public static int2 RunSum(
            this in NativeArray<int2> source
            )
        {
            var func = source.NewArraySumFunc_int2();
            return source.Run(func);
        }

        public static JobHandle<int2> ScheduleSum(
            this in NativeArray<int2> source
            )
        {
            var func = source.NewArraySumFunc_int2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int2> source,
            ref NativeArray<int2> output
            )
        {
            var func = source.NewArraySumFunc_int2();
            return source.Schedule(func, ref output);
        }

        public static int2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int2<T, TSelector> : IFunc<NativeArray<T>, int2>
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            public ValueFunc<T, int2>.Struct<TSelector> Selector;

            public int2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2>.Struct<ArraySumFunc_int2<T, TSelector>>
        NewArraySumFunc_int2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var structFunc = new ArraySumFunc_int2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int2>.New<ArraySumFunc_int2<T, TSelector>>(structFunc);
        }

        public static int2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.NewArraySumFunc_int2(selector);
            return source.Run(func);
        }

        public static JobHandle<int2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.NewArraySumFunc_int2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int2> output,
            ValueFunc<T, int2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2>
        {
            var func = source.NewArraySumFunc_int2(selector);
            return source.Schedule(func, ref output);
        }


        public static int2x2 Sum(
            this in NativeArray<int2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int2x2 : IFunc<NativeArray<int2x2>, int2x2>
        {
            public int2x2 Invoke(NativeArray<int2x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int2x2>, int2x2>.Struct<ArraySumFunc_int2x2>
        NewArraySumFunc_int2x2(
            this in NativeArray<int2x2> source
            )
        {
            return ValueFunc<NativeArray<int2x2>, int2x2>.New<ArraySumFunc_int2x2>();
        }

        public static int2x2 RunSum(
            this in NativeArray<int2x2> source
            )
        {
            var func = source.NewArraySumFunc_int2x2();
            return source.Run(func);
        }

        public static JobHandle<int2x2> ScheduleSum(
            this in NativeArray<int2x2> source
            )
        {
            var func = source.NewArraySumFunc_int2x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int2x2> source,
            ref NativeArray<int2x2> output
            )
        {
            var func = source.NewArraySumFunc_int2x2();
            return source.Schedule(func, ref output);
        }

        public static int2x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int2x2<T, TSelector> : IFunc<NativeArray<T>, int2x2>
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            public ValueFunc<T, int2x2>.Struct<TSelector> Selector;

            public int2x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2x2>.Struct<ArraySumFunc_int2x2<T, TSelector>>
        NewArraySumFunc_int2x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var structFunc = new ArraySumFunc_int2x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int2x2>.New<ArraySumFunc_int2x2<T, TSelector>>(structFunc);
        }

        public static int2x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.NewArraySumFunc_int2x2(selector);
            return source.Run(func);
        }

        public static JobHandle<int2x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.NewArraySumFunc_int2x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int2x2> output,
            ValueFunc<T, int2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x2>
        {
            var func = source.NewArraySumFunc_int2x2(selector);
            return source.Schedule(func, ref output);
        }


        public static int2x3 Sum(
            this in NativeArray<int2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int2x3 : IFunc<NativeArray<int2x3>, int2x3>
        {
            public int2x3 Invoke(NativeArray<int2x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int2x3>, int2x3>.Struct<ArraySumFunc_int2x3>
        NewArraySumFunc_int2x3(
            this in NativeArray<int2x3> source
            )
        {
            return ValueFunc<NativeArray<int2x3>, int2x3>.New<ArraySumFunc_int2x3>();
        }

        public static int2x3 RunSum(
            this in NativeArray<int2x3> source
            )
        {
            var func = source.NewArraySumFunc_int2x3();
            return source.Run(func);
        }

        public static JobHandle<int2x3> ScheduleSum(
            this in NativeArray<int2x3> source
            )
        {
            var func = source.NewArraySumFunc_int2x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int2x3> source,
            ref NativeArray<int2x3> output
            )
        {
            var func = source.NewArraySumFunc_int2x3();
            return source.Schedule(func, ref output);
        }

        public static int2x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int2x3<T, TSelector> : IFunc<NativeArray<T>, int2x3>
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            public ValueFunc<T, int2x3>.Struct<TSelector> Selector;

            public int2x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2x3>.Struct<ArraySumFunc_int2x3<T, TSelector>>
        NewArraySumFunc_int2x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var structFunc = new ArraySumFunc_int2x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int2x3>.New<ArraySumFunc_int2x3<T, TSelector>>(structFunc);
        }

        public static int2x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.NewArraySumFunc_int2x3(selector);
            return source.Run(func);
        }

        public static JobHandle<int2x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.NewArraySumFunc_int2x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int2x3> output,
            ValueFunc<T, int2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x3>
        {
            var func = source.NewArraySumFunc_int2x3(selector);
            return source.Schedule(func, ref output);
        }


        public static int2x4 Sum(
            this in NativeArray<int2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int2x4 : IFunc<NativeArray<int2x4>, int2x4>
        {
            public int2x4 Invoke(NativeArray<int2x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int2x4>, int2x4>.Struct<ArraySumFunc_int2x4>
        NewArraySumFunc_int2x4(
            this in NativeArray<int2x4> source
            )
        {
            return ValueFunc<NativeArray<int2x4>, int2x4>.New<ArraySumFunc_int2x4>();
        }

        public static int2x4 RunSum(
            this in NativeArray<int2x4> source
            )
        {
            var func = source.NewArraySumFunc_int2x4();
            return source.Run(func);
        }

        public static JobHandle<int2x4> ScheduleSum(
            this in NativeArray<int2x4> source
            )
        {
            var func = source.NewArraySumFunc_int2x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int2x4> source,
            ref NativeArray<int2x4> output
            )
        {
            var func = source.NewArraySumFunc_int2x4();
            return source.Schedule(func, ref output);
        }

        public static int2x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int2x4<T, TSelector> : IFunc<NativeArray<T>, int2x4>
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            public ValueFunc<T, int2x4>.Struct<TSelector> Selector;

            public int2x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int2x4>.Struct<ArraySumFunc_int2x4<T, TSelector>>
        NewArraySumFunc_int2x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var structFunc = new ArraySumFunc_int2x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int2x4>.New<ArraySumFunc_int2x4<T, TSelector>>(structFunc);
        }

        public static int2x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.NewArraySumFunc_int2x4(selector);
            return source.Run(func);
        }

        public static JobHandle<int2x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.NewArraySumFunc_int2x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int2x4> output,
            ValueFunc<T, int2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int2x4>
        {
            var func = source.NewArraySumFunc_int2x4(selector);
            return source.Schedule(func, ref output);
        }


        public static int3 Sum(
            this in NativeArray<int3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int3 : IFunc<NativeArray<int3>, int3>
        {
            public int3 Invoke(NativeArray<int3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int3>, int3>.Struct<ArraySumFunc_int3>
        NewArraySumFunc_int3(
            this in NativeArray<int3> source
            )
        {
            return ValueFunc<NativeArray<int3>, int3>.New<ArraySumFunc_int3>();
        }

        public static int3 RunSum(
            this in NativeArray<int3> source
            )
        {
            var func = source.NewArraySumFunc_int3();
            return source.Run(func);
        }

        public static JobHandle<int3> ScheduleSum(
            this in NativeArray<int3> source
            )
        {
            var func = source.NewArraySumFunc_int3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int3> source,
            ref NativeArray<int3> output
            )
        {
            var func = source.NewArraySumFunc_int3();
            return source.Schedule(func, ref output);
        }

        public static int3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int3<T, TSelector> : IFunc<NativeArray<T>, int3>
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            public ValueFunc<T, int3>.Struct<TSelector> Selector;

            public int3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3>.Struct<ArraySumFunc_int3<T, TSelector>>
        NewArraySumFunc_int3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var structFunc = new ArraySumFunc_int3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int3>.New<ArraySumFunc_int3<T, TSelector>>(structFunc);
        }

        public static int3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.NewArraySumFunc_int3(selector);
            return source.Run(func);
        }

        public static JobHandle<int3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.NewArraySumFunc_int3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int3> output,
            ValueFunc<T, int3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3>
        {
            var func = source.NewArraySumFunc_int3(selector);
            return source.Schedule(func, ref output);
        }


        public static int3x2 Sum(
            this in NativeArray<int3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int3x2 : IFunc<NativeArray<int3x2>, int3x2>
        {
            public int3x2 Invoke(NativeArray<int3x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int3x2>, int3x2>.Struct<ArraySumFunc_int3x2>
        NewArraySumFunc_int3x2(
            this in NativeArray<int3x2> source
            )
        {
            return ValueFunc<NativeArray<int3x2>, int3x2>.New<ArraySumFunc_int3x2>();
        }

        public static int3x2 RunSum(
            this in NativeArray<int3x2> source
            )
        {
            var func = source.NewArraySumFunc_int3x2();
            return source.Run(func);
        }

        public static JobHandle<int3x2> ScheduleSum(
            this in NativeArray<int3x2> source
            )
        {
            var func = source.NewArraySumFunc_int3x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int3x2> source,
            ref NativeArray<int3x2> output
            )
        {
            var func = source.NewArraySumFunc_int3x2();
            return source.Schedule(func, ref output);
        }

        public static int3x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int3x2<T, TSelector> : IFunc<NativeArray<T>, int3x2>
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            public ValueFunc<T, int3x2>.Struct<TSelector> Selector;

            public int3x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3x2>.Struct<ArraySumFunc_int3x2<T, TSelector>>
        NewArraySumFunc_int3x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var structFunc = new ArraySumFunc_int3x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int3x2>.New<ArraySumFunc_int3x2<T, TSelector>>(structFunc);
        }

        public static int3x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.NewArraySumFunc_int3x2(selector);
            return source.Run(func);
        }

        public static JobHandle<int3x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.NewArraySumFunc_int3x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int3x2> output,
            ValueFunc<T, int3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x2>
        {
            var func = source.NewArraySumFunc_int3x2(selector);
            return source.Schedule(func, ref output);
        }


        public static int3x3 Sum(
            this in NativeArray<int3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int3x3 : IFunc<NativeArray<int3x3>, int3x3>
        {
            public int3x3 Invoke(NativeArray<int3x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int3x3>, int3x3>.Struct<ArraySumFunc_int3x3>
        NewArraySumFunc_int3x3(
            this in NativeArray<int3x3> source
            )
        {
            return ValueFunc<NativeArray<int3x3>, int3x3>.New<ArraySumFunc_int3x3>();
        }

        public static int3x3 RunSum(
            this in NativeArray<int3x3> source
            )
        {
            var func = source.NewArraySumFunc_int3x3();
            return source.Run(func);
        }

        public static JobHandle<int3x3> ScheduleSum(
            this in NativeArray<int3x3> source
            )
        {
            var func = source.NewArraySumFunc_int3x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int3x3> source,
            ref NativeArray<int3x3> output
            )
        {
            var func = source.NewArraySumFunc_int3x3();
            return source.Schedule(func, ref output);
        }

        public static int3x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int3x3<T, TSelector> : IFunc<NativeArray<T>, int3x3>
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            public ValueFunc<T, int3x3>.Struct<TSelector> Selector;

            public int3x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3x3>.Struct<ArraySumFunc_int3x3<T, TSelector>>
        NewArraySumFunc_int3x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var structFunc = new ArraySumFunc_int3x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int3x3>.New<ArraySumFunc_int3x3<T, TSelector>>(structFunc);
        }

        public static int3x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.NewArraySumFunc_int3x3(selector);
            return source.Run(func);
        }

        public static JobHandle<int3x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.NewArraySumFunc_int3x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int3x3> output,
            ValueFunc<T, int3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x3>
        {
            var func = source.NewArraySumFunc_int3x3(selector);
            return source.Schedule(func, ref output);
        }


        public static int3x4 Sum(
            this in NativeArray<int3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int3x4 : IFunc<NativeArray<int3x4>, int3x4>
        {
            public int3x4 Invoke(NativeArray<int3x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int3x4>, int3x4>.Struct<ArraySumFunc_int3x4>
        NewArraySumFunc_int3x4(
            this in NativeArray<int3x4> source
            )
        {
            return ValueFunc<NativeArray<int3x4>, int3x4>.New<ArraySumFunc_int3x4>();
        }

        public static int3x4 RunSum(
            this in NativeArray<int3x4> source
            )
        {
            var func = source.NewArraySumFunc_int3x4();
            return source.Run(func);
        }

        public static JobHandle<int3x4> ScheduleSum(
            this in NativeArray<int3x4> source
            )
        {
            var func = source.NewArraySumFunc_int3x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int3x4> source,
            ref NativeArray<int3x4> output
            )
        {
            var func = source.NewArraySumFunc_int3x4();
            return source.Schedule(func, ref output);
        }

        public static int3x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int3x4<T, TSelector> : IFunc<NativeArray<T>, int3x4>
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            public ValueFunc<T, int3x4>.Struct<TSelector> Selector;

            public int3x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int3x4>.Struct<ArraySumFunc_int3x4<T, TSelector>>
        NewArraySumFunc_int3x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var structFunc = new ArraySumFunc_int3x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int3x4>.New<ArraySumFunc_int3x4<T, TSelector>>(structFunc);
        }

        public static int3x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.NewArraySumFunc_int3x4(selector);
            return source.Run(func);
        }

        public static JobHandle<int3x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.NewArraySumFunc_int3x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int3x4> output,
            ValueFunc<T, int3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int3x4>
        {
            var func = source.NewArraySumFunc_int3x4(selector);
            return source.Schedule(func, ref output);
        }


        public static int4 Sum(
            this in NativeArray<int4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int4 : IFunc<NativeArray<int4>, int4>
        {
            public int4 Invoke(NativeArray<int4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int4>, int4>.Struct<ArraySumFunc_int4>
        NewArraySumFunc_int4(
            this in NativeArray<int4> source
            )
        {
            return ValueFunc<NativeArray<int4>, int4>.New<ArraySumFunc_int4>();
        }

        public static int4 RunSum(
            this in NativeArray<int4> source
            )
        {
            var func = source.NewArraySumFunc_int4();
            return source.Run(func);
        }

        public static JobHandle<int4> ScheduleSum(
            this in NativeArray<int4> source
            )
        {
            var func = source.NewArraySumFunc_int4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int4> source,
            ref NativeArray<int4> output
            )
        {
            var func = source.NewArraySumFunc_int4();
            return source.Schedule(func, ref output);
        }

        public static int4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int4<T, TSelector> : IFunc<NativeArray<T>, int4>
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            public ValueFunc<T, int4>.Struct<TSelector> Selector;

            public int4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4>.Struct<ArraySumFunc_int4<T, TSelector>>
        NewArraySumFunc_int4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var structFunc = new ArraySumFunc_int4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int4>.New<ArraySumFunc_int4<T, TSelector>>(structFunc);
        }

        public static int4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.NewArraySumFunc_int4(selector);
            return source.Run(func);
        }

        public static JobHandle<int4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.NewArraySumFunc_int4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int4> output,
            ValueFunc<T, int4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4>
        {
            var func = source.NewArraySumFunc_int4(selector);
            return source.Schedule(func, ref output);
        }


        public static int4x2 Sum(
            this in NativeArray<int4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int4x2 : IFunc<NativeArray<int4x2>, int4x2>
        {
            public int4x2 Invoke(NativeArray<int4x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int4x2>, int4x2>.Struct<ArraySumFunc_int4x2>
        NewArraySumFunc_int4x2(
            this in NativeArray<int4x2> source
            )
        {
            return ValueFunc<NativeArray<int4x2>, int4x2>.New<ArraySumFunc_int4x2>();
        }

        public static int4x2 RunSum(
            this in NativeArray<int4x2> source
            )
        {
            var func = source.NewArraySumFunc_int4x2();
            return source.Run(func);
        }

        public static JobHandle<int4x2> ScheduleSum(
            this in NativeArray<int4x2> source
            )
        {
            var func = source.NewArraySumFunc_int4x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int4x2> source,
            ref NativeArray<int4x2> output
            )
        {
            var func = source.NewArraySumFunc_int4x2();
            return source.Schedule(func, ref output);
        }

        public static int4x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int4x2<T, TSelector> : IFunc<NativeArray<T>, int4x2>
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            public ValueFunc<T, int4x2>.Struct<TSelector> Selector;

            public int4x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4x2>.Struct<ArraySumFunc_int4x2<T, TSelector>>
        NewArraySumFunc_int4x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var structFunc = new ArraySumFunc_int4x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int4x2>.New<ArraySumFunc_int4x2<T, TSelector>>(structFunc);
        }

        public static int4x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.NewArraySumFunc_int4x2(selector);
            return source.Run(func);
        }

        public static JobHandle<int4x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.NewArraySumFunc_int4x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int4x2> output,
            ValueFunc<T, int4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x2>
        {
            var func = source.NewArraySumFunc_int4x2(selector);
            return source.Schedule(func, ref output);
        }


        public static int4x3 Sum(
            this in NativeArray<int4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int4x3 : IFunc<NativeArray<int4x3>, int4x3>
        {
            public int4x3 Invoke(NativeArray<int4x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int4x3>, int4x3>.Struct<ArraySumFunc_int4x3>
        NewArraySumFunc_int4x3(
            this in NativeArray<int4x3> source
            )
        {
            return ValueFunc<NativeArray<int4x3>, int4x3>.New<ArraySumFunc_int4x3>();
        }

        public static int4x3 RunSum(
            this in NativeArray<int4x3> source
            )
        {
            var func = source.NewArraySumFunc_int4x3();
            return source.Run(func);
        }

        public static JobHandle<int4x3> ScheduleSum(
            this in NativeArray<int4x3> source
            )
        {
            var func = source.NewArraySumFunc_int4x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int4x3> source,
            ref NativeArray<int4x3> output
            )
        {
            var func = source.NewArraySumFunc_int4x3();
            return source.Schedule(func, ref output);
        }

        public static int4x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int4x3<T, TSelector> : IFunc<NativeArray<T>, int4x3>
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            public ValueFunc<T, int4x3>.Struct<TSelector> Selector;

            public int4x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4x3>.Struct<ArraySumFunc_int4x3<T, TSelector>>
        NewArraySumFunc_int4x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var structFunc = new ArraySumFunc_int4x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int4x3>.New<ArraySumFunc_int4x3<T, TSelector>>(structFunc);
        }

        public static int4x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.NewArraySumFunc_int4x3(selector);
            return source.Run(func);
        }

        public static JobHandle<int4x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.NewArraySumFunc_int4x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int4x3> output,
            ValueFunc<T, int4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x3>
        {
            var func = source.NewArraySumFunc_int4x3(selector);
            return source.Schedule(func, ref output);
        }


        public static int4x4 Sum(
            this in NativeArray<int4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_int4x4 : IFunc<NativeArray<int4x4>, int4x4>
        {
            public int4x4 Invoke(NativeArray<int4x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<int4x4>, int4x4>.Struct<ArraySumFunc_int4x4>
        NewArraySumFunc_int4x4(
            this in NativeArray<int4x4> source
            )
        {
            return ValueFunc<NativeArray<int4x4>, int4x4>.New<ArraySumFunc_int4x4>();
        }

        public static int4x4 RunSum(
            this in NativeArray<int4x4> source
            )
        {
            var func = source.NewArraySumFunc_int4x4();
            return source.Run(func);
        }

        public static JobHandle<int4x4> ScheduleSum(
            this in NativeArray<int4x4> source
            )
        {
            var func = source.NewArraySumFunc_int4x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<int4x4> source,
            ref NativeArray<int4x4> output
            )
        {
            var func = source.NewArraySumFunc_int4x4();
            return source.Schedule(func, ref output);
        }

        public static int4x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            int4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_int4x4<T, TSelector> : IFunc<NativeArray<T>, int4x4>
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            public ValueFunc<T, int4x4>.Struct<TSelector> Selector;

            public int4x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, int4x4>.Struct<ArraySumFunc_int4x4<T, TSelector>>
        NewArraySumFunc_int4x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var structFunc = new ArraySumFunc_int4x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, int4x4>.New<ArraySumFunc_int4x4<T, TSelector>>(structFunc);
        }

        public static int4x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.NewArraySumFunc_int4x4(selector);
            return source.Run(func);
        }

        public static JobHandle<int4x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.NewArraySumFunc_int4x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<int4x4> output,
            ValueFunc<T, int4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, int4x4>
        {
            var func = source.NewArraySumFunc_int4x4(selector);
            return source.Schedule(func, ref output);
        }


        public static uint Sum(
            this in NativeArray<uint> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint : IFunc<NativeArray<uint>, uint>
        {
            public uint Invoke(NativeArray<uint> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint>, uint>.Struct<ArraySumFunc_uint>
        NewArraySumFunc_uint(
            this in NativeArray<uint> source
            )
        {
            return ValueFunc<NativeArray<uint>, uint>.New<ArraySumFunc_uint>();
        }

        public static uint RunSum(
            this in NativeArray<uint> source
            )
        {
            var func = source.NewArraySumFunc_uint();
            return source.Run(func);
        }

        public static JobHandle<uint> ScheduleSum(
            this in NativeArray<uint> source
            )
        {
            var func = source.NewArraySumFunc_uint();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint> source,
            ref NativeArray<uint> output
            )
        {
            var func = source.NewArraySumFunc_uint();
            return source.Schedule(func, ref output);
        }

        public static uint Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint<T, TSelector> : IFunc<NativeArray<T>, uint>
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            public ValueFunc<T, uint>.Struct<TSelector> Selector;

            public uint Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint>.Struct<ArraySumFunc_uint<T, TSelector>>
        NewArraySumFunc_uint<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var structFunc = new ArraySumFunc_uint<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint>.New<ArraySumFunc_uint<T, TSelector>>(structFunc);
        }

        public static uint RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.NewArraySumFunc_uint(selector);
            return source.Run(func);
        }

        public static JobHandle<uint> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.NewArraySumFunc_uint(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint> output,
            ValueFunc<T, uint>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint>
        {
            var func = source.NewArraySumFunc_uint(selector);
            return source.Schedule(func, ref output);
        }


        public static uint2 Sum(
            this in NativeArray<uint2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint2 : IFunc<NativeArray<uint2>, uint2>
        {
            public uint2 Invoke(NativeArray<uint2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint2>, uint2>.Struct<ArraySumFunc_uint2>
        NewArraySumFunc_uint2(
            this in NativeArray<uint2> source
            )
        {
            return ValueFunc<NativeArray<uint2>, uint2>.New<ArraySumFunc_uint2>();
        }

        public static uint2 RunSum(
            this in NativeArray<uint2> source
            )
        {
            var func = source.NewArraySumFunc_uint2();
            return source.Run(func);
        }

        public static JobHandle<uint2> ScheduleSum(
            this in NativeArray<uint2> source
            )
        {
            var func = source.NewArraySumFunc_uint2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint2> source,
            ref NativeArray<uint2> output
            )
        {
            var func = source.NewArraySumFunc_uint2();
            return source.Schedule(func, ref output);
        }

        public static uint2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint2<T, TSelector> : IFunc<NativeArray<T>, uint2>
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            public ValueFunc<T, uint2>.Struct<TSelector> Selector;

            public uint2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2>.Struct<ArraySumFunc_uint2<T, TSelector>>
        NewArraySumFunc_uint2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var structFunc = new ArraySumFunc_uint2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint2>.New<ArraySumFunc_uint2<T, TSelector>>(structFunc);
        }

        public static uint2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.NewArraySumFunc_uint2(selector);
            return source.Run(func);
        }

        public static JobHandle<uint2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.NewArraySumFunc_uint2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint2> output,
            ValueFunc<T, uint2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2>
        {
            var func = source.NewArraySumFunc_uint2(selector);
            return source.Schedule(func, ref output);
        }


        public static uint2x2 Sum(
            this in NativeArray<uint2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint2x2 : IFunc<NativeArray<uint2x2>, uint2x2>
        {
            public uint2x2 Invoke(NativeArray<uint2x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint2x2>, uint2x2>.Struct<ArraySumFunc_uint2x2>
        NewArraySumFunc_uint2x2(
            this in NativeArray<uint2x2> source
            )
        {
            return ValueFunc<NativeArray<uint2x2>, uint2x2>.New<ArraySumFunc_uint2x2>();
        }

        public static uint2x2 RunSum(
            this in NativeArray<uint2x2> source
            )
        {
            var func = source.NewArraySumFunc_uint2x2();
            return source.Run(func);
        }

        public static JobHandle<uint2x2> ScheduleSum(
            this in NativeArray<uint2x2> source
            )
        {
            var func = source.NewArraySumFunc_uint2x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint2x2> source,
            ref NativeArray<uint2x2> output
            )
        {
            var func = source.NewArraySumFunc_uint2x2();
            return source.Schedule(func, ref output);
        }

        public static uint2x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint2x2<T, TSelector> : IFunc<NativeArray<T>, uint2x2>
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            public ValueFunc<T, uint2x2>.Struct<TSelector> Selector;

            public uint2x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2x2>.Struct<ArraySumFunc_uint2x2<T, TSelector>>
        NewArraySumFunc_uint2x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var structFunc = new ArraySumFunc_uint2x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint2x2>.New<ArraySumFunc_uint2x2<T, TSelector>>(structFunc);
        }

        public static uint2x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.NewArraySumFunc_uint2x2(selector);
            return source.Run(func);
        }

        public static JobHandle<uint2x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.NewArraySumFunc_uint2x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint2x2> output,
            ValueFunc<T, uint2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x2>
        {
            var func = source.NewArraySumFunc_uint2x2(selector);
            return source.Schedule(func, ref output);
        }


        public static uint2x3 Sum(
            this in NativeArray<uint2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint2x3 : IFunc<NativeArray<uint2x3>, uint2x3>
        {
            public uint2x3 Invoke(NativeArray<uint2x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint2x3>, uint2x3>.Struct<ArraySumFunc_uint2x3>
        NewArraySumFunc_uint2x3(
            this in NativeArray<uint2x3> source
            )
        {
            return ValueFunc<NativeArray<uint2x3>, uint2x3>.New<ArraySumFunc_uint2x3>();
        }

        public static uint2x3 RunSum(
            this in NativeArray<uint2x3> source
            )
        {
            var func = source.NewArraySumFunc_uint2x3();
            return source.Run(func);
        }

        public static JobHandle<uint2x3> ScheduleSum(
            this in NativeArray<uint2x3> source
            )
        {
            var func = source.NewArraySumFunc_uint2x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint2x3> source,
            ref NativeArray<uint2x3> output
            )
        {
            var func = source.NewArraySumFunc_uint2x3();
            return source.Schedule(func, ref output);
        }

        public static uint2x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint2x3<T, TSelector> : IFunc<NativeArray<T>, uint2x3>
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            public ValueFunc<T, uint2x3>.Struct<TSelector> Selector;

            public uint2x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2x3>.Struct<ArraySumFunc_uint2x3<T, TSelector>>
        NewArraySumFunc_uint2x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var structFunc = new ArraySumFunc_uint2x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint2x3>.New<ArraySumFunc_uint2x3<T, TSelector>>(structFunc);
        }

        public static uint2x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.NewArraySumFunc_uint2x3(selector);
            return source.Run(func);
        }

        public static JobHandle<uint2x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.NewArraySumFunc_uint2x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint2x3> output,
            ValueFunc<T, uint2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x3>
        {
            var func = source.NewArraySumFunc_uint2x3(selector);
            return source.Schedule(func, ref output);
        }


        public static uint2x4 Sum(
            this in NativeArray<uint2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint2x4 : IFunc<NativeArray<uint2x4>, uint2x4>
        {
            public uint2x4 Invoke(NativeArray<uint2x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint2x4>, uint2x4>.Struct<ArraySumFunc_uint2x4>
        NewArraySumFunc_uint2x4(
            this in NativeArray<uint2x4> source
            )
        {
            return ValueFunc<NativeArray<uint2x4>, uint2x4>.New<ArraySumFunc_uint2x4>();
        }

        public static uint2x4 RunSum(
            this in NativeArray<uint2x4> source
            )
        {
            var func = source.NewArraySumFunc_uint2x4();
            return source.Run(func);
        }

        public static JobHandle<uint2x4> ScheduleSum(
            this in NativeArray<uint2x4> source
            )
        {
            var func = source.NewArraySumFunc_uint2x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint2x4> source,
            ref NativeArray<uint2x4> output
            )
        {
            var func = source.NewArraySumFunc_uint2x4();
            return source.Schedule(func, ref output);
        }

        public static uint2x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint2x4<T, TSelector> : IFunc<NativeArray<T>, uint2x4>
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            public ValueFunc<T, uint2x4>.Struct<TSelector> Selector;

            public uint2x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint2x4>.Struct<ArraySumFunc_uint2x4<T, TSelector>>
        NewArraySumFunc_uint2x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var structFunc = new ArraySumFunc_uint2x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint2x4>.New<ArraySumFunc_uint2x4<T, TSelector>>(structFunc);
        }

        public static uint2x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.NewArraySumFunc_uint2x4(selector);
            return source.Run(func);
        }

        public static JobHandle<uint2x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.NewArraySumFunc_uint2x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint2x4> output,
            ValueFunc<T, uint2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint2x4>
        {
            var func = source.NewArraySumFunc_uint2x4(selector);
            return source.Schedule(func, ref output);
        }


        public static uint3 Sum(
            this in NativeArray<uint3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint3 : IFunc<NativeArray<uint3>, uint3>
        {
            public uint3 Invoke(NativeArray<uint3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint3>, uint3>.Struct<ArraySumFunc_uint3>
        NewArraySumFunc_uint3(
            this in NativeArray<uint3> source
            )
        {
            return ValueFunc<NativeArray<uint3>, uint3>.New<ArraySumFunc_uint3>();
        }

        public static uint3 RunSum(
            this in NativeArray<uint3> source
            )
        {
            var func = source.NewArraySumFunc_uint3();
            return source.Run(func);
        }

        public static JobHandle<uint3> ScheduleSum(
            this in NativeArray<uint3> source
            )
        {
            var func = source.NewArraySumFunc_uint3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint3> source,
            ref NativeArray<uint3> output
            )
        {
            var func = source.NewArraySumFunc_uint3();
            return source.Schedule(func, ref output);
        }

        public static uint3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint3<T, TSelector> : IFunc<NativeArray<T>, uint3>
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            public ValueFunc<T, uint3>.Struct<TSelector> Selector;

            public uint3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3>.Struct<ArraySumFunc_uint3<T, TSelector>>
        NewArraySumFunc_uint3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var structFunc = new ArraySumFunc_uint3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint3>.New<ArraySumFunc_uint3<T, TSelector>>(structFunc);
        }

        public static uint3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.NewArraySumFunc_uint3(selector);
            return source.Run(func);
        }

        public static JobHandle<uint3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.NewArraySumFunc_uint3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint3> output,
            ValueFunc<T, uint3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3>
        {
            var func = source.NewArraySumFunc_uint3(selector);
            return source.Schedule(func, ref output);
        }


        public static uint3x2 Sum(
            this in NativeArray<uint3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint3x2 : IFunc<NativeArray<uint3x2>, uint3x2>
        {
            public uint3x2 Invoke(NativeArray<uint3x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint3x2>, uint3x2>.Struct<ArraySumFunc_uint3x2>
        NewArraySumFunc_uint3x2(
            this in NativeArray<uint3x2> source
            )
        {
            return ValueFunc<NativeArray<uint3x2>, uint3x2>.New<ArraySumFunc_uint3x2>();
        }

        public static uint3x2 RunSum(
            this in NativeArray<uint3x2> source
            )
        {
            var func = source.NewArraySumFunc_uint3x2();
            return source.Run(func);
        }

        public static JobHandle<uint3x2> ScheduleSum(
            this in NativeArray<uint3x2> source
            )
        {
            var func = source.NewArraySumFunc_uint3x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint3x2> source,
            ref NativeArray<uint3x2> output
            )
        {
            var func = source.NewArraySumFunc_uint3x2();
            return source.Schedule(func, ref output);
        }

        public static uint3x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint3x2<T, TSelector> : IFunc<NativeArray<T>, uint3x2>
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            public ValueFunc<T, uint3x2>.Struct<TSelector> Selector;

            public uint3x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3x2>.Struct<ArraySumFunc_uint3x2<T, TSelector>>
        NewArraySumFunc_uint3x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var structFunc = new ArraySumFunc_uint3x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint3x2>.New<ArraySumFunc_uint3x2<T, TSelector>>(structFunc);
        }

        public static uint3x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.NewArraySumFunc_uint3x2(selector);
            return source.Run(func);
        }

        public static JobHandle<uint3x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.NewArraySumFunc_uint3x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint3x2> output,
            ValueFunc<T, uint3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x2>
        {
            var func = source.NewArraySumFunc_uint3x2(selector);
            return source.Schedule(func, ref output);
        }


        public static uint3x3 Sum(
            this in NativeArray<uint3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint3x3 : IFunc<NativeArray<uint3x3>, uint3x3>
        {
            public uint3x3 Invoke(NativeArray<uint3x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint3x3>, uint3x3>.Struct<ArraySumFunc_uint3x3>
        NewArraySumFunc_uint3x3(
            this in NativeArray<uint3x3> source
            )
        {
            return ValueFunc<NativeArray<uint3x3>, uint3x3>.New<ArraySumFunc_uint3x3>();
        }

        public static uint3x3 RunSum(
            this in NativeArray<uint3x3> source
            )
        {
            var func = source.NewArraySumFunc_uint3x3();
            return source.Run(func);
        }

        public static JobHandle<uint3x3> ScheduleSum(
            this in NativeArray<uint3x3> source
            )
        {
            var func = source.NewArraySumFunc_uint3x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint3x3> source,
            ref NativeArray<uint3x3> output
            )
        {
            var func = source.NewArraySumFunc_uint3x3();
            return source.Schedule(func, ref output);
        }

        public static uint3x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint3x3<T, TSelector> : IFunc<NativeArray<T>, uint3x3>
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            public ValueFunc<T, uint3x3>.Struct<TSelector> Selector;

            public uint3x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3x3>.Struct<ArraySumFunc_uint3x3<T, TSelector>>
        NewArraySumFunc_uint3x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var structFunc = new ArraySumFunc_uint3x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint3x3>.New<ArraySumFunc_uint3x3<T, TSelector>>(structFunc);
        }

        public static uint3x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.NewArraySumFunc_uint3x3(selector);
            return source.Run(func);
        }

        public static JobHandle<uint3x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.NewArraySumFunc_uint3x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint3x3> output,
            ValueFunc<T, uint3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x3>
        {
            var func = source.NewArraySumFunc_uint3x3(selector);
            return source.Schedule(func, ref output);
        }


        public static uint3x4 Sum(
            this in NativeArray<uint3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint3x4 : IFunc<NativeArray<uint3x4>, uint3x4>
        {
            public uint3x4 Invoke(NativeArray<uint3x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint3x4>, uint3x4>.Struct<ArraySumFunc_uint3x4>
        NewArraySumFunc_uint3x4(
            this in NativeArray<uint3x4> source
            )
        {
            return ValueFunc<NativeArray<uint3x4>, uint3x4>.New<ArraySumFunc_uint3x4>();
        }

        public static uint3x4 RunSum(
            this in NativeArray<uint3x4> source
            )
        {
            var func = source.NewArraySumFunc_uint3x4();
            return source.Run(func);
        }

        public static JobHandle<uint3x4> ScheduleSum(
            this in NativeArray<uint3x4> source
            )
        {
            var func = source.NewArraySumFunc_uint3x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint3x4> source,
            ref NativeArray<uint3x4> output
            )
        {
            var func = source.NewArraySumFunc_uint3x4();
            return source.Schedule(func, ref output);
        }

        public static uint3x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint3x4<T, TSelector> : IFunc<NativeArray<T>, uint3x4>
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            public ValueFunc<T, uint3x4>.Struct<TSelector> Selector;

            public uint3x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint3x4>.Struct<ArraySumFunc_uint3x4<T, TSelector>>
        NewArraySumFunc_uint3x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var structFunc = new ArraySumFunc_uint3x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint3x4>.New<ArraySumFunc_uint3x4<T, TSelector>>(structFunc);
        }

        public static uint3x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.NewArraySumFunc_uint3x4(selector);
            return source.Run(func);
        }

        public static JobHandle<uint3x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.NewArraySumFunc_uint3x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint3x4> output,
            ValueFunc<T, uint3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint3x4>
        {
            var func = source.NewArraySumFunc_uint3x4(selector);
            return source.Schedule(func, ref output);
        }


        public static uint4 Sum(
            this in NativeArray<uint4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint4 : IFunc<NativeArray<uint4>, uint4>
        {
            public uint4 Invoke(NativeArray<uint4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint4>, uint4>.Struct<ArraySumFunc_uint4>
        NewArraySumFunc_uint4(
            this in NativeArray<uint4> source
            )
        {
            return ValueFunc<NativeArray<uint4>, uint4>.New<ArraySumFunc_uint4>();
        }

        public static uint4 RunSum(
            this in NativeArray<uint4> source
            )
        {
            var func = source.NewArraySumFunc_uint4();
            return source.Run(func);
        }

        public static JobHandle<uint4> ScheduleSum(
            this in NativeArray<uint4> source
            )
        {
            var func = source.NewArraySumFunc_uint4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint4> source,
            ref NativeArray<uint4> output
            )
        {
            var func = source.NewArraySumFunc_uint4();
            return source.Schedule(func, ref output);
        }

        public static uint4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint4<T, TSelector> : IFunc<NativeArray<T>, uint4>
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            public ValueFunc<T, uint4>.Struct<TSelector> Selector;

            public uint4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4>.Struct<ArraySumFunc_uint4<T, TSelector>>
        NewArraySumFunc_uint4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var structFunc = new ArraySumFunc_uint4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint4>.New<ArraySumFunc_uint4<T, TSelector>>(structFunc);
        }

        public static uint4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.NewArraySumFunc_uint4(selector);
            return source.Run(func);
        }

        public static JobHandle<uint4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.NewArraySumFunc_uint4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint4> output,
            ValueFunc<T, uint4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4>
        {
            var func = source.NewArraySumFunc_uint4(selector);
            return source.Schedule(func, ref output);
        }


        public static uint4x2 Sum(
            this in NativeArray<uint4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint4x2 : IFunc<NativeArray<uint4x2>, uint4x2>
        {
            public uint4x2 Invoke(NativeArray<uint4x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint4x2>, uint4x2>.Struct<ArraySumFunc_uint4x2>
        NewArraySumFunc_uint4x2(
            this in NativeArray<uint4x2> source
            )
        {
            return ValueFunc<NativeArray<uint4x2>, uint4x2>.New<ArraySumFunc_uint4x2>();
        }

        public static uint4x2 RunSum(
            this in NativeArray<uint4x2> source
            )
        {
            var func = source.NewArraySumFunc_uint4x2();
            return source.Run(func);
        }

        public static JobHandle<uint4x2> ScheduleSum(
            this in NativeArray<uint4x2> source
            )
        {
            var func = source.NewArraySumFunc_uint4x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint4x2> source,
            ref NativeArray<uint4x2> output
            )
        {
            var func = source.NewArraySumFunc_uint4x2();
            return source.Schedule(func, ref output);
        }

        public static uint4x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint4x2<T, TSelector> : IFunc<NativeArray<T>, uint4x2>
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            public ValueFunc<T, uint4x2>.Struct<TSelector> Selector;

            public uint4x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4x2>.Struct<ArraySumFunc_uint4x2<T, TSelector>>
        NewArraySumFunc_uint4x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var structFunc = new ArraySumFunc_uint4x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint4x2>.New<ArraySumFunc_uint4x2<T, TSelector>>(structFunc);
        }

        public static uint4x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.NewArraySumFunc_uint4x2(selector);
            return source.Run(func);
        }

        public static JobHandle<uint4x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.NewArraySumFunc_uint4x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint4x2> output,
            ValueFunc<T, uint4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x2>
        {
            var func = source.NewArraySumFunc_uint4x2(selector);
            return source.Schedule(func, ref output);
        }


        public static uint4x3 Sum(
            this in NativeArray<uint4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint4x3 : IFunc<NativeArray<uint4x3>, uint4x3>
        {
            public uint4x3 Invoke(NativeArray<uint4x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint4x3>, uint4x3>.Struct<ArraySumFunc_uint4x3>
        NewArraySumFunc_uint4x3(
            this in NativeArray<uint4x3> source
            )
        {
            return ValueFunc<NativeArray<uint4x3>, uint4x3>.New<ArraySumFunc_uint4x3>();
        }

        public static uint4x3 RunSum(
            this in NativeArray<uint4x3> source
            )
        {
            var func = source.NewArraySumFunc_uint4x3();
            return source.Run(func);
        }

        public static JobHandle<uint4x3> ScheduleSum(
            this in NativeArray<uint4x3> source
            )
        {
            var func = source.NewArraySumFunc_uint4x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint4x3> source,
            ref NativeArray<uint4x3> output
            )
        {
            var func = source.NewArraySumFunc_uint4x3();
            return source.Schedule(func, ref output);
        }

        public static uint4x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint4x3<T, TSelector> : IFunc<NativeArray<T>, uint4x3>
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            public ValueFunc<T, uint4x3>.Struct<TSelector> Selector;

            public uint4x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4x3>.Struct<ArraySumFunc_uint4x3<T, TSelector>>
        NewArraySumFunc_uint4x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var structFunc = new ArraySumFunc_uint4x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint4x3>.New<ArraySumFunc_uint4x3<T, TSelector>>(structFunc);
        }

        public static uint4x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.NewArraySumFunc_uint4x3(selector);
            return source.Run(func);
        }

        public static JobHandle<uint4x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.NewArraySumFunc_uint4x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint4x3> output,
            ValueFunc<T, uint4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x3>
        {
            var func = source.NewArraySumFunc_uint4x3(selector);
            return source.Schedule(func, ref output);
        }


        public static uint4x4 Sum(
            this in NativeArray<uint4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_uint4x4 : IFunc<NativeArray<uint4x4>, uint4x4>
        {
            public uint4x4 Invoke(NativeArray<uint4x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<uint4x4>, uint4x4>.Struct<ArraySumFunc_uint4x4>
        NewArraySumFunc_uint4x4(
            this in NativeArray<uint4x4> source
            )
        {
            return ValueFunc<NativeArray<uint4x4>, uint4x4>.New<ArraySumFunc_uint4x4>();
        }

        public static uint4x4 RunSum(
            this in NativeArray<uint4x4> source
            )
        {
            var func = source.NewArraySumFunc_uint4x4();
            return source.Run(func);
        }

        public static JobHandle<uint4x4> ScheduleSum(
            this in NativeArray<uint4x4> source
            )
        {
            var func = source.NewArraySumFunc_uint4x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<uint4x4> source,
            ref NativeArray<uint4x4> output
            )
        {
            var func = source.NewArraySumFunc_uint4x4();
            return source.Schedule(func, ref output);
        }

        public static uint4x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            uint4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_uint4x4<T, TSelector> : IFunc<NativeArray<T>, uint4x4>
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            public ValueFunc<T, uint4x4>.Struct<TSelector> Selector;

            public uint4x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, uint4x4>.Struct<ArraySumFunc_uint4x4<T, TSelector>>
        NewArraySumFunc_uint4x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var structFunc = new ArraySumFunc_uint4x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, uint4x4>.New<ArraySumFunc_uint4x4<T, TSelector>>(structFunc);
        }

        public static uint4x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.NewArraySumFunc_uint4x4(selector);
            return source.Run(func);
        }

        public static JobHandle<uint4x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.NewArraySumFunc_uint4x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<uint4x4> output,
            ValueFunc<T, uint4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, uint4x4>
        {
            var func = source.NewArraySumFunc_uint4x4(selector);
            return source.Schedule(func, ref output);
        }


        public static float Sum(
            this in NativeArray<float> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float : IFunc<NativeArray<float>, float>
        {
            public float Invoke(NativeArray<float> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float>, float>.Struct<ArraySumFunc_float>
        NewArraySumFunc_float(
            this in NativeArray<float> source
            )
        {
            return ValueFunc<NativeArray<float>, float>.New<ArraySumFunc_float>();
        }

        public static float RunSum(
            this in NativeArray<float> source
            )
        {
            var func = source.NewArraySumFunc_float();
            return source.Run(func);
        }

        public static JobHandle<float> ScheduleSum(
            this in NativeArray<float> source
            )
        {
            var func = source.NewArraySumFunc_float();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float> source,
            ref NativeArray<float> output
            )
        {
            var func = source.NewArraySumFunc_float();
            return source.Schedule(func, ref output);
        }

        public static float Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            if (source.Length == 0) throw Error.NoElements();
            float sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float<T, TSelector> : IFunc<NativeArray<T>, float>
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            public ValueFunc<T, float>.Struct<TSelector> Selector;

            public float Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float>.Struct<ArraySumFunc_float<T, TSelector>>
        NewArraySumFunc_float<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var structFunc = new ArraySumFunc_float<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float>.New<ArraySumFunc_float<T, TSelector>>(structFunc);
        }

        public static float RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.NewArraySumFunc_float(selector);
            return source.Run(func);
        }

        public static JobHandle<float> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.NewArraySumFunc_float(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float> output,
            ValueFunc<T, float>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float>
        {
            var func = source.NewArraySumFunc_float(selector);
            return source.Schedule(func, ref output);
        }


        public static float2 Sum(
            this in NativeArray<float2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float2 : IFunc<NativeArray<float2>, float2>
        {
            public float2 Invoke(NativeArray<float2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float2>, float2>.Struct<ArraySumFunc_float2>
        NewArraySumFunc_float2(
            this in NativeArray<float2> source
            )
        {
            return ValueFunc<NativeArray<float2>, float2>.New<ArraySumFunc_float2>();
        }

        public static float2 RunSum(
            this in NativeArray<float2> source
            )
        {
            var func = source.NewArraySumFunc_float2();
            return source.Run(func);
        }

        public static JobHandle<float2> ScheduleSum(
            this in NativeArray<float2> source
            )
        {
            var func = source.NewArraySumFunc_float2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float2> source,
            ref NativeArray<float2> output
            )
        {
            var func = source.NewArraySumFunc_float2();
            return source.Schedule(func, ref output);
        }

        public static float2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float2<T, TSelector> : IFunc<NativeArray<T>, float2>
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            public ValueFunc<T, float2>.Struct<TSelector> Selector;

            public float2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2>.Struct<ArraySumFunc_float2<T, TSelector>>
        NewArraySumFunc_float2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var structFunc = new ArraySumFunc_float2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float2>.New<ArraySumFunc_float2<T, TSelector>>(structFunc);
        }

        public static float2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.NewArraySumFunc_float2(selector);
            return source.Run(func);
        }

        public static JobHandle<float2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.NewArraySumFunc_float2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float2> output,
            ValueFunc<T, float2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2>
        {
            var func = source.NewArraySumFunc_float2(selector);
            return source.Schedule(func, ref output);
        }


        public static float2x2 Sum(
            this in NativeArray<float2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float2x2 : IFunc<NativeArray<float2x2>, float2x2>
        {
            public float2x2 Invoke(NativeArray<float2x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float2x2>, float2x2>.Struct<ArraySumFunc_float2x2>
        NewArraySumFunc_float2x2(
            this in NativeArray<float2x2> source
            )
        {
            return ValueFunc<NativeArray<float2x2>, float2x2>.New<ArraySumFunc_float2x2>();
        }

        public static float2x2 RunSum(
            this in NativeArray<float2x2> source
            )
        {
            var func = source.NewArraySumFunc_float2x2();
            return source.Run(func);
        }

        public static JobHandle<float2x2> ScheduleSum(
            this in NativeArray<float2x2> source
            )
        {
            var func = source.NewArraySumFunc_float2x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float2x2> source,
            ref NativeArray<float2x2> output
            )
        {
            var func = source.NewArraySumFunc_float2x2();
            return source.Schedule(func, ref output);
        }

        public static float2x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float2x2<T, TSelector> : IFunc<NativeArray<T>, float2x2>
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            public ValueFunc<T, float2x2>.Struct<TSelector> Selector;

            public float2x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2x2>.Struct<ArraySumFunc_float2x2<T, TSelector>>
        NewArraySumFunc_float2x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var structFunc = new ArraySumFunc_float2x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float2x2>.New<ArraySumFunc_float2x2<T, TSelector>>(structFunc);
        }

        public static float2x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.NewArraySumFunc_float2x2(selector);
            return source.Run(func);
        }

        public static JobHandle<float2x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.NewArraySumFunc_float2x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float2x2> output,
            ValueFunc<T, float2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x2>
        {
            var func = source.NewArraySumFunc_float2x2(selector);
            return source.Schedule(func, ref output);
        }


        public static float2x3 Sum(
            this in NativeArray<float2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float2x3 : IFunc<NativeArray<float2x3>, float2x3>
        {
            public float2x3 Invoke(NativeArray<float2x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float2x3>, float2x3>.Struct<ArraySumFunc_float2x3>
        NewArraySumFunc_float2x3(
            this in NativeArray<float2x3> source
            )
        {
            return ValueFunc<NativeArray<float2x3>, float2x3>.New<ArraySumFunc_float2x3>();
        }

        public static float2x3 RunSum(
            this in NativeArray<float2x3> source
            )
        {
            var func = source.NewArraySumFunc_float2x3();
            return source.Run(func);
        }

        public static JobHandle<float2x3> ScheduleSum(
            this in NativeArray<float2x3> source
            )
        {
            var func = source.NewArraySumFunc_float2x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float2x3> source,
            ref NativeArray<float2x3> output
            )
        {
            var func = source.NewArraySumFunc_float2x3();
            return source.Schedule(func, ref output);
        }

        public static float2x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float2x3<T, TSelector> : IFunc<NativeArray<T>, float2x3>
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            public ValueFunc<T, float2x3>.Struct<TSelector> Selector;

            public float2x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2x3>.Struct<ArraySumFunc_float2x3<T, TSelector>>
        NewArraySumFunc_float2x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var structFunc = new ArraySumFunc_float2x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float2x3>.New<ArraySumFunc_float2x3<T, TSelector>>(structFunc);
        }

        public static float2x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.NewArraySumFunc_float2x3(selector);
            return source.Run(func);
        }

        public static JobHandle<float2x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.NewArraySumFunc_float2x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float2x3> output,
            ValueFunc<T, float2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x3>
        {
            var func = source.NewArraySumFunc_float2x3(selector);
            return source.Schedule(func, ref output);
        }


        public static float2x4 Sum(
            this in NativeArray<float2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float2x4 : IFunc<NativeArray<float2x4>, float2x4>
        {
            public float2x4 Invoke(NativeArray<float2x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float2x4>, float2x4>.Struct<ArraySumFunc_float2x4>
        NewArraySumFunc_float2x4(
            this in NativeArray<float2x4> source
            )
        {
            return ValueFunc<NativeArray<float2x4>, float2x4>.New<ArraySumFunc_float2x4>();
        }

        public static float2x4 RunSum(
            this in NativeArray<float2x4> source
            )
        {
            var func = source.NewArraySumFunc_float2x4();
            return source.Run(func);
        }

        public static JobHandle<float2x4> ScheduleSum(
            this in NativeArray<float2x4> source
            )
        {
            var func = source.NewArraySumFunc_float2x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float2x4> source,
            ref NativeArray<float2x4> output
            )
        {
            var func = source.NewArraySumFunc_float2x4();
            return source.Schedule(func, ref output);
        }

        public static float2x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float2x4<T, TSelector> : IFunc<NativeArray<T>, float2x4>
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            public ValueFunc<T, float2x4>.Struct<TSelector> Selector;

            public float2x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float2x4>.Struct<ArraySumFunc_float2x4<T, TSelector>>
        NewArraySumFunc_float2x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var structFunc = new ArraySumFunc_float2x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float2x4>.New<ArraySumFunc_float2x4<T, TSelector>>(structFunc);
        }

        public static float2x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.NewArraySumFunc_float2x4(selector);
            return source.Run(func);
        }

        public static JobHandle<float2x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.NewArraySumFunc_float2x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float2x4> output,
            ValueFunc<T, float2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float2x4>
        {
            var func = source.NewArraySumFunc_float2x4(selector);
            return source.Schedule(func, ref output);
        }


        public static float3 Sum(
            this in NativeArray<float3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float3 : IFunc<NativeArray<float3>, float3>
        {
            public float3 Invoke(NativeArray<float3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float3>, float3>.Struct<ArraySumFunc_float3>
        NewArraySumFunc_float3(
            this in NativeArray<float3> source
            )
        {
            return ValueFunc<NativeArray<float3>, float3>.New<ArraySumFunc_float3>();
        }

        public static float3 RunSum(
            this in NativeArray<float3> source
            )
        {
            var func = source.NewArraySumFunc_float3();
            return source.Run(func);
        }

        public static JobHandle<float3> ScheduleSum(
            this in NativeArray<float3> source
            )
        {
            var func = source.NewArraySumFunc_float3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float3> source,
            ref NativeArray<float3> output
            )
        {
            var func = source.NewArraySumFunc_float3();
            return source.Schedule(func, ref output);
        }

        public static float3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float3<T, TSelector> : IFunc<NativeArray<T>, float3>
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            public ValueFunc<T, float3>.Struct<TSelector> Selector;

            public float3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3>.Struct<ArraySumFunc_float3<T, TSelector>>
        NewArraySumFunc_float3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var structFunc = new ArraySumFunc_float3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float3>.New<ArraySumFunc_float3<T, TSelector>>(structFunc);
        }

        public static float3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.NewArraySumFunc_float3(selector);
            return source.Run(func);
        }

        public static JobHandle<float3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.NewArraySumFunc_float3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float3> output,
            ValueFunc<T, float3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3>
        {
            var func = source.NewArraySumFunc_float3(selector);
            return source.Schedule(func, ref output);
        }


        public static float3x2 Sum(
            this in NativeArray<float3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float3x2 : IFunc<NativeArray<float3x2>, float3x2>
        {
            public float3x2 Invoke(NativeArray<float3x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float3x2>, float3x2>.Struct<ArraySumFunc_float3x2>
        NewArraySumFunc_float3x2(
            this in NativeArray<float3x2> source
            )
        {
            return ValueFunc<NativeArray<float3x2>, float3x2>.New<ArraySumFunc_float3x2>();
        }

        public static float3x2 RunSum(
            this in NativeArray<float3x2> source
            )
        {
            var func = source.NewArraySumFunc_float3x2();
            return source.Run(func);
        }

        public static JobHandle<float3x2> ScheduleSum(
            this in NativeArray<float3x2> source
            )
        {
            var func = source.NewArraySumFunc_float3x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float3x2> source,
            ref NativeArray<float3x2> output
            )
        {
            var func = source.NewArraySumFunc_float3x2();
            return source.Schedule(func, ref output);
        }

        public static float3x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float3x2<T, TSelector> : IFunc<NativeArray<T>, float3x2>
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            public ValueFunc<T, float3x2>.Struct<TSelector> Selector;

            public float3x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3x2>.Struct<ArraySumFunc_float3x2<T, TSelector>>
        NewArraySumFunc_float3x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var structFunc = new ArraySumFunc_float3x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float3x2>.New<ArraySumFunc_float3x2<T, TSelector>>(structFunc);
        }

        public static float3x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.NewArraySumFunc_float3x2(selector);
            return source.Run(func);
        }

        public static JobHandle<float3x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.NewArraySumFunc_float3x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float3x2> output,
            ValueFunc<T, float3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x2>
        {
            var func = source.NewArraySumFunc_float3x2(selector);
            return source.Schedule(func, ref output);
        }


        public static float3x3 Sum(
            this in NativeArray<float3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float3x3 : IFunc<NativeArray<float3x3>, float3x3>
        {
            public float3x3 Invoke(NativeArray<float3x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float3x3>, float3x3>.Struct<ArraySumFunc_float3x3>
        NewArraySumFunc_float3x3(
            this in NativeArray<float3x3> source
            )
        {
            return ValueFunc<NativeArray<float3x3>, float3x3>.New<ArraySumFunc_float3x3>();
        }

        public static float3x3 RunSum(
            this in NativeArray<float3x3> source
            )
        {
            var func = source.NewArraySumFunc_float3x3();
            return source.Run(func);
        }

        public static JobHandle<float3x3> ScheduleSum(
            this in NativeArray<float3x3> source
            )
        {
            var func = source.NewArraySumFunc_float3x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float3x3> source,
            ref NativeArray<float3x3> output
            )
        {
            var func = source.NewArraySumFunc_float3x3();
            return source.Schedule(func, ref output);
        }

        public static float3x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float3x3<T, TSelector> : IFunc<NativeArray<T>, float3x3>
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            public ValueFunc<T, float3x3>.Struct<TSelector> Selector;

            public float3x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3x3>.Struct<ArraySumFunc_float3x3<T, TSelector>>
        NewArraySumFunc_float3x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var structFunc = new ArraySumFunc_float3x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float3x3>.New<ArraySumFunc_float3x3<T, TSelector>>(structFunc);
        }

        public static float3x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.NewArraySumFunc_float3x3(selector);
            return source.Run(func);
        }

        public static JobHandle<float3x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.NewArraySumFunc_float3x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float3x3> output,
            ValueFunc<T, float3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x3>
        {
            var func = source.NewArraySumFunc_float3x3(selector);
            return source.Schedule(func, ref output);
        }


        public static float3x4 Sum(
            this in NativeArray<float3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float3x4 : IFunc<NativeArray<float3x4>, float3x4>
        {
            public float3x4 Invoke(NativeArray<float3x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float3x4>, float3x4>.Struct<ArraySumFunc_float3x4>
        NewArraySumFunc_float3x4(
            this in NativeArray<float3x4> source
            )
        {
            return ValueFunc<NativeArray<float3x4>, float3x4>.New<ArraySumFunc_float3x4>();
        }

        public static float3x4 RunSum(
            this in NativeArray<float3x4> source
            )
        {
            var func = source.NewArraySumFunc_float3x4();
            return source.Run(func);
        }

        public static JobHandle<float3x4> ScheduleSum(
            this in NativeArray<float3x4> source
            )
        {
            var func = source.NewArraySumFunc_float3x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float3x4> source,
            ref NativeArray<float3x4> output
            )
        {
            var func = source.NewArraySumFunc_float3x4();
            return source.Schedule(func, ref output);
        }

        public static float3x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float3x4<T, TSelector> : IFunc<NativeArray<T>, float3x4>
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            public ValueFunc<T, float3x4>.Struct<TSelector> Selector;

            public float3x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float3x4>.Struct<ArraySumFunc_float3x4<T, TSelector>>
        NewArraySumFunc_float3x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var structFunc = new ArraySumFunc_float3x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float3x4>.New<ArraySumFunc_float3x4<T, TSelector>>(structFunc);
        }

        public static float3x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.NewArraySumFunc_float3x4(selector);
            return source.Run(func);
        }

        public static JobHandle<float3x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.NewArraySumFunc_float3x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float3x4> output,
            ValueFunc<T, float3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float3x4>
        {
            var func = source.NewArraySumFunc_float3x4(selector);
            return source.Schedule(func, ref output);
        }


        public static float4 Sum(
            this in NativeArray<float4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float4 : IFunc<NativeArray<float4>, float4>
        {
            public float4 Invoke(NativeArray<float4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float4>, float4>.Struct<ArraySumFunc_float4>
        NewArraySumFunc_float4(
            this in NativeArray<float4> source
            )
        {
            return ValueFunc<NativeArray<float4>, float4>.New<ArraySumFunc_float4>();
        }

        public static float4 RunSum(
            this in NativeArray<float4> source
            )
        {
            var func = source.NewArraySumFunc_float4();
            return source.Run(func);
        }

        public static JobHandle<float4> ScheduleSum(
            this in NativeArray<float4> source
            )
        {
            var func = source.NewArraySumFunc_float4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float4> source,
            ref NativeArray<float4> output
            )
        {
            var func = source.NewArraySumFunc_float4();
            return source.Schedule(func, ref output);
        }

        public static float4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float4<T, TSelector> : IFunc<NativeArray<T>, float4>
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            public ValueFunc<T, float4>.Struct<TSelector> Selector;

            public float4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4>.Struct<ArraySumFunc_float4<T, TSelector>>
        NewArraySumFunc_float4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var structFunc = new ArraySumFunc_float4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float4>.New<ArraySumFunc_float4<T, TSelector>>(structFunc);
        }

        public static float4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.NewArraySumFunc_float4(selector);
            return source.Run(func);
        }

        public static JobHandle<float4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.NewArraySumFunc_float4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float4> output,
            ValueFunc<T, float4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4>
        {
            var func = source.NewArraySumFunc_float4(selector);
            return source.Schedule(func, ref output);
        }


        public static float4x2 Sum(
            this in NativeArray<float4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float4x2 : IFunc<NativeArray<float4x2>, float4x2>
        {
            public float4x2 Invoke(NativeArray<float4x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float4x2>, float4x2>.Struct<ArraySumFunc_float4x2>
        NewArraySumFunc_float4x2(
            this in NativeArray<float4x2> source
            )
        {
            return ValueFunc<NativeArray<float4x2>, float4x2>.New<ArraySumFunc_float4x2>();
        }

        public static float4x2 RunSum(
            this in NativeArray<float4x2> source
            )
        {
            var func = source.NewArraySumFunc_float4x2();
            return source.Run(func);
        }

        public static JobHandle<float4x2> ScheduleSum(
            this in NativeArray<float4x2> source
            )
        {
            var func = source.NewArraySumFunc_float4x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float4x2> source,
            ref NativeArray<float4x2> output
            )
        {
            var func = source.NewArraySumFunc_float4x2();
            return source.Schedule(func, ref output);
        }

        public static float4x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float4x2<T, TSelector> : IFunc<NativeArray<T>, float4x2>
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            public ValueFunc<T, float4x2>.Struct<TSelector> Selector;

            public float4x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4x2>.Struct<ArraySumFunc_float4x2<T, TSelector>>
        NewArraySumFunc_float4x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var structFunc = new ArraySumFunc_float4x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float4x2>.New<ArraySumFunc_float4x2<T, TSelector>>(structFunc);
        }

        public static float4x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.NewArraySumFunc_float4x2(selector);
            return source.Run(func);
        }

        public static JobHandle<float4x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.NewArraySumFunc_float4x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float4x2> output,
            ValueFunc<T, float4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x2>
        {
            var func = source.NewArraySumFunc_float4x2(selector);
            return source.Schedule(func, ref output);
        }


        public static float4x3 Sum(
            this in NativeArray<float4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float4x3 : IFunc<NativeArray<float4x3>, float4x3>
        {
            public float4x3 Invoke(NativeArray<float4x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float4x3>, float4x3>.Struct<ArraySumFunc_float4x3>
        NewArraySumFunc_float4x3(
            this in NativeArray<float4x3> source
            )
        {
            return ValueFunc<NativeArray<float4x3>, float4x3>.New<ArraySumFunc_float4x3>();
        }

        public static float4x3 RunSum(
            this in NativeArray<float4x3> source
            )
        {
            var func = source.NewArraySumFunc_float4x3();
            return source.Run(func);
        }

        public static JobHandle<float4x3> ScheduleSum(
            this in NativeArray<float4x3> source
            )
        {
            var func = source.NewArraySumFunc_float4x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float4x3> source,
            ref NativeArray<float4x3> output
            )
        {
            var func = source.NewArraySumFunc_float4x3();
            return source.Schedule(func, ref output);
        }

        public static float4x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float4x3<T, TSelector> : IFunc<NativeArray<T>, float4x3>
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            public ValueFunc<T, float4x3>.Struct<TSelector> Selector;

            public float4x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4x3>.Struct<ArraySumFunc_float4x3<T, TSelector>>
        NewArraySumFunc_float4x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var structFunc = new ArraySumFunc_float4x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float4x3>.New<ArraySumFunc_float4x3<T, TSelector>>(structFunc);
        }

        public static float4x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.NewArraySumFunc_float4x3(selector);
            return source.Run(func);
        }

        public static JobHandle<float4x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.NewArraySumFunc_float4x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float4x3> output,
            ValueFunc<T, float4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x3>
        {
            var func = source.NewArraySumFunc_float4x3(selector);
            return source.Schedule(func, ref output);
        }


        public static float4x4 Sum(
            this in NativeArray<float4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_float4x4 : IFunc<NativeArray<float4x4>, float4x4>
        {
            public float4x4 Invoke(NativeArray<float4x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<float4x4>, float4x4>.Struct<ArraySumFunc_float4x4>
        NewArraySumFunc_float4x4(
            this in NativeArray<float4x4> source
            )
        {
            return ValueFunc<NativeArray<float4x4>, float4x4>.New<ArraySumFunc_float4x4>();
        }

        public static float4x4 RunSum(
            this in NativeArray<float4x4> source
            )
        {
            var func = source.NewArraySumFunc_float4x4();
            return source.Run(func);
        }

        public static JobHandle<float4x4> ScheduleSum(
            this in NativeArray<float4x4> source
            )
        {
            var func = source.NewArraySumFunc_float4x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<float4x4> source,
            ref NativeArray<float4x4> output
            )
        {
            var func = source.NewArraySumFunc_float4x4();
            return source.Schedule(func, ref output);
        }

        public static float4x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            float4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_float4x4<T, TSelector> : IFunc<NativeArray<T>, float4x4>
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            public ValueFunc<T, float4x4>.Struct<TSelector> Selector;

            public float4x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, float4x4>.Struct<ArraySumFunc_float4x4<T, TSelector>>
        NewArraySumFunc_float4x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var structFunc = new ArraySumFunc_float4x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, float4x4>.New<ArraySumFunc_float4x4<T, TSelector>>(structFunc);
        }

        public static float4x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.NewArraySumFunc_float4x4(selector);
            return source.Run(func);
        }

        public static JobHandle<float4x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.NewArraySumFunc_float4x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<float4x4> output,
            ValueFunc<T, float4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, float4x4>
        {
            var func = source.NewArraySumFunc_float4x4(selector);
            return source.Schedule(func, ref output);
        }


        public static double Sum(
            this in NativeArray<double> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double : IFunc<NativeArray<double>, double>
        {
            public double Invoke(NativeArray<double> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double>, double>.Struct<ArraySumFunc_double>
        NewArraySumFunc_double(
            this in NativeArray<double> source
            )
        {
            return ValueFunc<NativeArray<double>, double>.New<ArraySumFunc_double>();
        }

        public static double RunSum(
            this in NativeArray<double> source
            )
        {
            var func = source.NewArraySumFunc_double();
            return source.Run(func);
        }

        public static JobHandle<double> ScheduleSum(
            this in NativeArray<double> source
            )
        {
            var func = source.NewArraySumFunc_double();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double> source,
            ref NativeArray<double> output
            )
        {
            var func = source.NewArraySumFunc_double();
            return source.Schedule(func, ref output);
        }

        public static double Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            if (source.Length == 0) throw Error.NoElements();
            double sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double<T, TSelector> : IFunc<NativeArray<T>, double>
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            public ValueFunc<T, double>.Struct<TSelector> Selector;

            public double Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double>.Struct<ArraySumFunc_double<T, TSelector>>
        NewArraySumFunc_double<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var structFunc = new ArraySumFunc_double<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double>.New<ArraySumFunc_double<T, TSelector>>(structFunc);
        }

        public static double RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.NewArraySumFunc_double(selector);
            return source.Run(func);
        }

        public static JobHandle<double> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.NewArraySumFunc_double(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double> output,
            ValueFunc<T, double>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double>
        {
            var func = source.NewArraySumFunc_double(selector);
            return source.Schedule(func, ref output);
        }


        public static double2 Sum(
            this in NativeArray<double2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double2 : IFunc<NativeArray<double2>, double2>
        {
            public double2 Invoke(NativeArray<double2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double2>, double2>.Struct<ArraySumFunc_double2>
        NewArraySumFunc_double2(
            this in NativeArray<double2> source
            )
        {
            return ValueFunc<NativeArray<double2>, double2>.New<ArraySumFunc_double2>();
        }

        public static double2 RunSum(
            this in NativeArray<double2> source
            )
        {
            var func = source.NewArraySumFunc_double2();
            return source.Run(func);
        }

        public static JobHandle<double2> ScheduleSum(
            this in NativeArray<double2> source
            )
        {
            var func = source.NewArraySumFunc_double2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double2> source,
            ref NativeArray<double2> output
            )
        {
            var func = source.NewArraySumFunc_double2();
            return source.Schedule(func, ref output);
        }

        public static double2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double2<T, TSelector> : IFunc<NativeArray<T>, double2>
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            public ValueFunc<T, double2>.Struct<TSelector> Selector;

            public double2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2>.Struct<ArraySumFunc_double2<T, TSelector>>
        NewArraySumFunc_double2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var structFunc = new ArraySumFunc_double2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double2>.New<ArraySumFunc_double2<T, TSelector>>(structFunc);
        }

        public static double2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.NewArraySumFunc_double2(selector);
            return source.Run(func);
        }

        public static JobHandle<double2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.NewArraySumFunc_double2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double2> output,
            ValueFunc<T, double2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2>
        {
            var func = source.NewArraySumFunc_double2(selector);
            return source.Schedule(func, ref output);
        }


        public static double2x2 Sum(
            this in NativeArray<double2x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double2x2 : IFunc<NativeArray<double2x2>, double2x2>
        {
            public double2x2 Invoke(NativeArray<double2x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double2x2>, double2x2>.Struct<ArraySumFunc_double2x2>
        NewArraySumFunc_double2x2(
            this in NativeArray<double2x2> source
            )
        {
            return ValueFunc<NativeArray<double2x2>, double2x2>.New<ArraySumFunc_double2x2>();
        }

        public static double2x2 RunSum(
            this in NativeArray<double2x2> source
            )
        {
            var func = source.NewArraySumFunc_double2x2();
            return source.Run(func);
        }

        public static JobHandle<double2x2> ScheduleSum(
            this in NativeArray<double2x2> source
            )
        {
            var func = source.NewArraySumFunc_double2x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double2x2> source,
            ref NativeArray<double2x2> output
            )
        {
            var func = source.NewArraySumFunc_double2x2();
            return source.Schedule(func, ref output);
        }

        public static double2x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double2x2<T, TSelector> : IFunc<NativeArray<T>, double2x2>
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            public ValueFunc<T, double2x2>.Struct<TSelector> Selector;

            public double2x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2x2>.Struct<ArraySumFunc_double2x2<T, TSelector>>
        NewArraySumFunc_double2x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var structFunc = new ArraySumFunc_double2x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double2x2>.New<ArraySumFunc_double2x2<T, TSelector>>(structFunc);
        }

        public static double2x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.NewArraySumFunc_double2x2(selector);
            return source.Run(func);
        }

        public static JobHandle<double2x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.NewArraySumFunc_double2x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double2x2> output,
            ValueFunc<T, double2x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x2>
        {
            var func = source.NewArraySumFunc_double2x2(selector);
            return source.Schedule(func, ref output);
        }


        public static double2x3 Sum(
            this in NativeArray<double2x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double2x3 : IFunc<NativeArray<double2x3>, double2x3>
        {
            public double2x3 Invoke(NativeArray<double2x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double2x3>, double2x3>.Struct<ArraySumFunc_double2x3>
        NewArraySumFunc_double2x3(
            this in NativeArray<double2x3> source
            )
        {
            return ValueFunc<NativeArray<double2x3>, double2x3>.New<ArraySumFunc_double2x3>();
        }

        public static double2x3 RunSum(
            this in NativeArray<double2x3> source
            )
        {
            var func = source.NewArraySumFunc_double2x3();
            return source.Run(func);
        }

        public static JobHandle<double2x3> ScheduleSum(
            this in NativeArray<double2x3> source
            )
        {
            var func = source.NewArraySumFunc_double2x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double2x3> source,
            ref NativeArray<double2x3> output
            )
        {
            var func = source.NewArraySumFunc_double2x3();
            return source.Schedule(func, ref output);
        }

        public static double2x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double2x3<T, TSelector> : IFunc<NativeArray<T>, double2x3>
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            public ValueFunc<T, double2x3>.Struct<TSelector> Selector;

            public double2x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2x3>.Struct<ArraySumFunc_double2x3<T, TSelector>>
        NewArraySumFunc_double2x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var structFunc = new ArraySumFunc_double2x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double2x3>.New<ArraySumFunc_double2x3<T, TSelector>>(structFunc);
        }

        public static double2x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.NewArraySumFunc_double2x3(selector);
            return source.Run(func);
        }

        public static JobHandle<double2x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.NewArraySumFunc_double2x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double2x3> output,
            ValueFunc<T, double2x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x3>
        {
            var func = source.NewArraySumFunc_double2x3(selector);
            return source.Schedule(func, ref output);
        }


        public static double2x4 Sum(
            this in NativeArray<double2x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double2x4 : IFunc<NativeArray<double2x4>, double2x4>
        {
            public double2x4 Invoke(NativeArray<double2x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double2x4>, double2x4>.Struct<ArraySumFunc_double2x4>
        NewArraySumFunc_double2x4(
            this in NativeArray<double2x4> source
            )
        {
            return ValueFunc<NativeArray<double2x4>, double2x4>.New<ArraySumFunc_double2x4>();
        }

        public static double2x4 RunSum(
            this in NativeArray<double2x4> source
            )
        {
            var func = source.NewArraySumFunc_double2x4();
            return source.Run(func);
        }

        public static JobHandle<double2x4> ScheduleSum(
            this in NativeArray<double2x4> source
            )
        {
            var func = source.NewArraySumFunc_double2x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double2x4> source,
            ref NativeArray<double2x4> output
            )
        {
            var func = source.NewArraySumFunc_double2x4();
            return source.Schedule(func, ref output);
        }

        public static double2x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double2x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double2x4<T, TSelector> : IFunc<NativeArray<T>, double2x4>
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            public ValueFunc<T, double2x4>.Struct<TSelector> Selector;

            public double2x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double2x4>.Struct<ArraySumFunc_double2x4<T, TSelector>>
        NewArraySumFunc_double2x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var structFunc = new ArraySumFunc_double2x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double2x4>.New<ArraySumFunc_double2x4<T, TSelector>>(structFunc);
        }

        public static double2x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.NewArraySumFunc_double2x4(selector);
            return source.Run(func);
        }

        public static JobHandle<double2x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.NewArraySumFunc_double2x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double2x4> output,
            ValueFunc<T, double2x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double2x4>
        {
            var func = source.NewArraySumFunc_double2x4(selector);
            return source.Schedule(func, ref output);
        }


        public static double3 Sum(
            this in NativeArray<double3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double3 : IFunc<NativeArray<double3>, double3>
        {
            public double3 Invoke(NativeArray<double3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double3>, double3>.Struct<ArraySumFunc_double3>
        NewArraySumFunc_double3(
            this in NativeArray<double3> source
            )
        {
            return ValueFunc<NativeArray<double3>, double3>.New<ArraySumFunc_double3>();
        }

        public static double3 RunSum(
            this in NativeArray<double3> source
            )
        {
            var func = source.NewArraySumFunc_double3();
            return source.Run(func);
        }

        public static JobHandle<double3> ScheduleSum(
            this in NativeArray<double3> source
            )
        {
            var func = source.NewArraySumFunc_double3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double3> source,
            ref NativeArray<double3> output
            )
        {
            var func = source.NewArraySumFunc_double3();
            return source.Schedule(func, ref output);
        }

        public static double3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double3<T, TSelector> : IFunc<NativeArray<T>, double3>
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            public ValueFunc<T, double3>.Struct<TSelector> Selector;

            public double3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3>.Struct<ArraySumFunc_double3<T, TSelector>>
        NewArraySumFunc_double3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var structFunc = new ArraySumFunc_double3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double3>.New<ArraySumFunc_double3<T, TSelector>>(structFunc);
        }

        public static double3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.NewArraySumFunc_double3(selector);
            return source.Run(func);
        }

        public static JobHandle<double3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.NewArraySumFunc_double3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double3> output,
            ValueFunc<T, double3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3>
        {
            var func = source.NewArraySumFunc_double3(selector);
            return source.Schedule(func, ref output);
        }


        public static double3x2 Sum(
            this in NativeArray<double3x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double3x2 : IFunc<NativeArray<double3x2>, double3x2>
        {
            public double3x2 Invoke(NativeArray<double3x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double3x2>, double3x2>.Struct<ArraySumFunc_double3x2>
        NewArraySumFunc_double3x2(
            this in NativeArray<double3x2> source
            )
        {
            return ValueFunc<NativeArray<double3x2>, double3x2>.New<ArraySumFunc_double3x2>();
        }

        public static double3x2 RunSum(
            this in NativeArray<double3x2> source
            )
        {
            var func = source.NewArraySumFunc_double3x2();
            return source.Run(func);
        }

        public static JobHandle<double3x2> ScheduleSum(
            this in NativeArray<double3x2> source
            )
        {
            var func = source.NewArraySumFunc_double3x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double3x2> source,
            ref NativeArray<double3x2> output
            )
        {
            var func = source.NewArraySumFunc_double3x2();
            return source.Schedule(func, ref output);
        }

        public static double3x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double3x2<T, TSelector> : IFunc<NativeArray<T>, double3x2>
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            public ValueFunc<T, double3x2>.Struct<TSelector> Selector;

            public double3x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3x2>.Struct<ArraySumFunc_double3x2<T, TSelector>>
        NewArraySumFunc_double3x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var structFunc = new ArraySumFunc_double3x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double3x2>.New<ArraySumFunc_double3x2<T, TSelector>>(structFunc);
        }

        public static double3x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.NewArraySumFunc_double3x2(selector);
            return source.Run(func);
        }

        public static JobHandle<double3x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.NewArraySumFunc_double3x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double3x2> output,
            ValueFunc<T, double3x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x2>
        {
            var func = source.NewArraySumFunc_double3x2(selector);
            return source.Schedule(func, ref output);
        }


        public static double3x3 Sum(
            this in NativeArray<double3x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double3x3 : IFunc<NativeArray<double3x3>, double3x3>
        {
            public double3x3 Invoke(NativeArray<double3x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double3x3>, double3x3>.Struct<ArraySumFunc_double3x3>
        NewArraySumFunc_double3x3(
            this in NativeArray<double3x3> source
            )
        {
            return ValueFunc<NativeArray<double3x3>, double3x3>.New<ArraySumFunc_double3x3>();
        }

        public static double3x3 RunSum(
            this in NativeArray<double3x3> source
            )
        {
            var func = source.NewArraySumFunc_double3x3();
            return source.Run(func);
        }

        public static JobHandle<double3x3> ScheduleSum(
            this in NativeArray<double3x3> source
            )
        {
            var func = source.NewArraySumFunc_double3x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double3x3> source,
            ref NativeArray<double3x3> output
            )
        {
            var func = source.NewArraySumFunc_double3x3();
            return source.Schedule(func, ref output);
        }

        public static double3x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double3x3<T, TSelector> : IFunc<NativeArray<T>, double3x3>
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            public ValueFunc<T, double3x3>.Struct<TSelector> Selector;

            public double3x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3x3>.Struct<ArraySumFunc_double3x3<T, TSelector>>
        NewArraySumFunc_double3x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var structFunc = new ArraySumFunc_double3x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double3x3>.New<ArraySumFunc_double3x3<T, TSelector>>(structFunc);
        }

        public static double3x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.NewArraySumFunc_double3x3(selector);
            return source.Run(func);
        }

        public static JobHandle<double3x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.NewArraySumFunc_double3x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double3x3> output,
            ValueFunc<T, double3x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x3>
        {
            var func = source.NewArraySumFunc_double3x3(selector);
            return source.Schedule(func, ref output);
        }


        public static double3x4 Sum(
            this in NativeArray<double3x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double3x4 : IFunc<NativeArray<double3x4>, double3x4>
        {
            public double3x4 Invoke(NativeArray<double3x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double3x4>, double3x4>.Struct<ArraySumFunc_double3x4>
        NewArraySumFunc_double3x4(
            this in NativeArray<double3x4> source
            )
        {
            return ValueFunc<NativeArray<double3x4>, double3x4>.New<ArraySumFunc_double3x4>();
        }

        public static double3x4 RunSum(
            this in NativeArray<double3x4> source
            )
        {
            var func = source.NewArraySumFunc_double3x4();
            return source.Run(func);
        }

        public static JobHandle<double3x4> ScheduleSum(
            this in NativeArray<double3x4> source
            )
        {
            var func = source.NewArraySumFunc_double3x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double3x4> source,
            ref NativeArray<double3x4> output
            )
        {
            var func = source.NewArraySumFunc_double3x4();
            return source.Schedule(func, ref output);
        }

        public static double3x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double3x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double3x4<T, TSelector> : IFunc<NativeArray<T>, double3x4>
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            public ValueFunc<T, double3x4>.Struct<TSelector> Selector;

            public double3x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double3x4>.Struct<ArraySumFunc_double3x4<T, TSelector>>
        NewArraySumFunc_double3x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var structFunc = new ArraySumFunc_double3x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double3x4>.New<ArraySumFunc_double3x4<T, TSelector>>(structFunc);
        }

        public static double3x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.NewArraySumFunc_double3x4(selector);
            return source.Run(func);
        }

        public static JobHandle<double3x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.NewArraySumFunc_double3x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double3x4> output,
            ValueFunc<T, double3x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double3x4>
        {
            var func = source.NewArraySumFunc_double3x4(selector);
            return source.Schedule(func, ref output);
        }


        public static double4 Sum(
            this in NativeArray<double4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double4 : IFunc<NativeArray<double4>, double4>
        {
            public double4 Invoke(NativeArray<double4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double4>, double4>.Struct<ArraySumFunc_double4>
        NewArraySumFunc_double4(
            this in NativeArray<double4> source
            )
        {
            return ValueFunc<NativeArray<double4>, double4>.New<ArraySumFunc_double4>();
        }

        public static double4 RunSum(
            this in NativeArray<double4> source
            )
        {
            var func = source.NewArraySumFunc_double4();
            return source.Run(func);
        }

        public static JobHandle<double4> ScheduleSum(
            this in NativeArray<double4> source
            )
        {
            var func = source.NewArraySumFunc_double4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double4> source,
            ref NativeArray<double4> output
            )
        {
            var func = source.NewArraySumFunc_double4();
            return source.Schedule(func, ref output);
        }

        public static double4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double4<T, TSelector> : IFunc<NativeArray<T>, double4>
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            public ValueFunc<T, double4>.Struct<TSelector> Selector;

            public double4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4>.Struct<ArraySumFunc_double4<T, TSelector>>
        NewArraySumFunc_double4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var structFunc = new ArraySumFunc_double4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double4>.New<ArraySumFunc_double4<T, TSelector>>(structFunc);
        }

        public static double4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.NewArraySumFunc_double4(selector);
            return source.Run(func);
        }

        public static JobHandle<double4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.NewArraySumFunc_double4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double4> output,
            ValueFunc<T, double4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4>
        {
            var func = source.NewArraySumFunc_double4(selector);
            return source.Schedule(func, ref output);
        }


        public static double4x2 Sum(
            this in NativeArray<double4x2> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double4x2 : IFunc<NativeArray<double4x2>, double4x2>
        {
            public double4x2 Invoke(NativeArray<double4x2> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double4x2>, double4x2>.Struct<ArraySumFunc_double4x2>
        NewArraySumFunc_double4x2(
            this in NativeArray<double4x2> source
            )
        {
            return ValueFunc<NativeArray<double4x2>, double4x2>.New<ArraySumFunc_double4x2>();
        }

        public static double4x2 RunSum(
            this in NativeArray<double4x2> source
            )
        {
            var func = source.NewArraySumFunc_double4x2();
            return source.Run(func);
        }

        public static JobHandle<double4x2> ScheduleSum(
            this in NativeArray<double4x2> source
            )
        {
            var func = source.NewArraySumFunc_double4x2();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double4x2> source,
            ref NativeArray<double4x2> output
            )
        {
            var func = source.NewArraySumFunc_double4x2();
            return source.Schedule(func, ref output);
        }

        public static double4x2 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x2 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double4x2<T, TSelector> : IFunc<NativeArray<T>, double4x2>
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            public ValueFunc<T, double4x2>.Struct<TSelector> Selector;

            public double4x2 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4x2>.Struct<ArraySumFunc_double4x2<T, TSelector>>
        NewArraySumFunc_double4x2<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var structFunc = new ArraySumFunc_double4x2<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double4x2>.New<ArraySumFunc_double4x2<T, TSelector>>(structFunc);
        }

        public static double4x2 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.NewArraySumFunc_double4x2(selector);
            return source.Run(func);
        }

        public static JobHandle<double4x2> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.NewArraySumFunc_double4x2(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double4x2> output,
            ValueFunc<T, double4x2>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x2>
        {
            var func = source.NewArraySumFunc_double4x2(selector);
            return source.Schedule(func, ref output);
        }


        public static double4x3 Sum(
            this in NativeArray<double4x3> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double4x3 : IFunc<NativeArray<double4x3>, double4x3>
        {
            public double4x3 Invoke(NativeArray<double4x3> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double4x3>, double4x3>.Struct<ArraySumFunc_double4x3>
        NewArraySumFunc_double4x3(
            this in NativeArray<double4x3> source
            )
        {
            return ValueFunc<NativeArray<double4x3>, double4x3>.New<ArraySumFunc_double4x3>();
        }

        public static double4x3 RunSum(
            this in NativeArray<double4x3> source
            )
        {
            var func = source.NewArraySumFunc_double4x3();
            return source.Run(func);
        }

        public static JobHandle<double4x3> ScheduleSum(
            this in NativeArray<double4x3> source
            )
        {
            var func = source.NewArraySumFunc_double4x3();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double4x3> source,
            ref NativeArray<double4x3> output
            )
        {
            var func = source.NewArraySumFunc_double4x3();
            return source.Schedule(func, ref output);
        }

        public static double4x3 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x3 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double4x3<T, TSelector> : IFunc<NativeArray<T>, double4x3>
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            public ValueFunc<T, double4x3>.Struct<TSelector> Selector;

            public double4x3 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4x3>.Struct<ArraySumFunc_double4x3<T, TSelector>>
        NewArraySumFunc_double4x3<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var structFunc = new ArraySumFunc_double4x3<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double4x3>.New<ArraySumFunc_double4x3<T, TSelector>>(structFunc);
        }

        public static double4x3 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.NewArraySumFunc_double4x3(selector);
            return source.Run(func);
        }

        public static JobHandle<double4x3> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.NewArraySumFunc_double4x3(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double4x3> output,
            ValueFunc<T, double4x3>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x3>
        {
            var func = source.NewArraySumFunc_double4x3(selector);
            return source.Schedule(func, ref output);
        }


        public static double4x4 Sum(
            this in NativeArray<double4x4> source
            )
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = source[0];
            for (var i = 1; i < source.Length; i++)
                sum += source[i];
            return sum;
        }

        public struct ArraySumFunc_double4x4 : IFunc<NativeArray<double4x4>, double4x4>
        {
            public double4x4 Invoke(NativeArray<double4x4> seq)
            {
                return seq.Sum();
            }
        }

        public static ValueFunc<NativeArray<double4x4>, double4x4>.Struct<ArraySumFunc_double4x4>
        NewArraySumFunc_double4x4(
            this in NativeArray<double4x4> source
            )
        {
            return ValueFunc<NativeArray<double4x4>, double4x4>.New<ArraySumFunc_double4x4>();
        }

        public static double4x4 RunSum(
            this in NativeArray<double4x4> source
            )
        {
            var func = source.NewArraySumFunc_double4x4();
            return source.Run(func);
        }

        public static JobHandle<double4x4> ScheduleSum(
            this in NativeArray<double4x4> source
            )
        {
            var func = source.NewArraySumFunc_double4x4();
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum(
            this in NativeArray<double4x4> source,
            ref NativeArray<double4x4> output
            )
        {
            var func = source.NewArraySumFunc_double4x4();
            return source.Schedule(func, ref output);
        }

        public static double4x4 Sum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            if (source.Length == 0) throw Error.NoElements();
            double4x4 sum = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
                sum += selector.Invoke(source[i]);
            return sum;
        }

        public struct ArraySumFunc_double4x4<T, TSelector> : IFunc<NativeArray<T>, double4x4>
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            public ValueFunc<T, double4x4>.Struct<TSelector> Selector;

            public double4x4 Invoke(NativeArray<T> source)
            {
                return source.Sum(Selector);
            }
        }

        public static ValueFunc<NativeArray<T>, double4x4>.Struct<ArraySumFunc_double4x4<T, TSelector>>
        NewArraySumFunc_double4x4<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var structFunc = new ArraySumFunc_double4x4<T, TSelector> { Selector = selector };
            return ValueFunc<NativeArray<T>, double4x4>.New<ArraySumFunc_double4x4<T, TSelector>>(structFunc);
        }

        public static double4x4 RunSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.NewArraySumFunc_double4x4(selector);
            return source.Run(func);
        }

        public static JobHandle<double4x4> ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.NewArraySumFunc_double4x4(selector);
            return source.Schedule(func);
        }

        public static JobHandle ScheduleSum<T, TSelector>(
            this in NativeArray<T> source,
            ref NativeArray<double4x4> output,
            ValueFunc<T, double4x4>.Struct<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, double4x4>
        {
            var func = source.NewArraySumFunc_double4x4(selector);
            return source.Schedule(func, ref output);
        }


    }
}
