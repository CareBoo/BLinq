<#@ assembly name="System.Core" #>
<#@ output extension=".gen.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Packages/com.careboo.blinq/CareBoo.Blinq/ValueSequence/ValueSequence.Sum.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Collections;

namespace CareBoo.Blinq
{
    public static partial class Sequence
    {
<#
var TYPES = new[] { "int", "uint", "float", "double" };
foreach (string TYPE_FULL in TYPES)
{
#>
        public static <#=TYPE_FULL#> Max(this ref NativeArray<<#=TYPE_FULL#>> source)
        {
            if (source.Length == 0) throw Error.NoElements();

            var max = source[0];
            for (var i = 1; i < source.Length; i++)
            {
                var val = source[i];
                if (val > max)
                    max = val;
            }
            return max;
        }

        public static <#=TYPE_FULL#> Min(this ref NativeArray<<#=TYPE_FULL#>> source)
        {
            if (source.Length == 0) throw Error.NoElements();

            var min = source[0];
            for (var i = 1; i < source.Length; i++)
            {
                var val = source[i];
                if (val < min)
                    min = val;
            }
            return min;
        }

        public static <#=TYPE_FULL#> Max<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            if (source.Length == 0) throw Error.NoElements();

            var max = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
            {
                var val = selector.Invoke(source[i]);
                if (val > max)
                    max = val;
            }
            return max;
        }

        public static <#=TYPE_FULL#> Min<T, TSelector>(
            this ref NativeArray<T> source,
            ValueFunc<T, <#=TYPE_FULL#>>.Impl<TSelector> selector
            )
            where T : struct
            where TSelector : struct, IFunc<T, <#=TYPE_FULL#>>
        {
            if (source.Length == 0) throw Error.NoElements();

            var min = selector.Invoke(source[0]);
            for (var i = 1; i < source.Length; i++)
            {
                var val = selector.Invoke(source[i]);
                if (val < min)
                    min = val;
            }
            return min;
        }

<#
}
#>
    }
}
