<#@ assembly name="System.Core" #>
<#@ output extension=".gen.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.PerformanceTesting;
using Unity.PerformanceTesting.Measurements;
using Unity.Collections;
using Unity.Jobs;
using Unity.Burst;
using CareBoo.Burst.Delegates;
using System.Collections;
using NUnit.Framework;
using Linq = System.Linq.Enumerable;
using Blinq = CareBoo.Blinq.Sequence;

internal class AverageTest
{
    protected MethodMeasurement MakeMeasurement(string name, Action method)
    {
        return Measure.Method(method)
            .SampleGroup(name)
            .WarmupCount(100)
            .MeasurementCount(20)
            .IterationsPerMeasurement(20)
            .GC();
    }

    internal class SelectValues
    {
        public static IEnumerable Values
        {
            get
            {
                yield return new int[1];
                yield return Linq.ToArray(Linq.Repeat(1, 100000));
            }
        }
    }

<#
var TYPES = new[] { "int", "float", "double" };
foreach (string TYPE_FULL in TYPES)
{
#>
    [BurstCompile]
    internal struct AverageJob_<#=TYPE_FULL#> : IJob
    {
        [ReadOnly]
        public NativeArray<<#=TYPE_FULL#>> Source;

        public void Execute()
        {
            Blinq.Average(Source);
        }
    }

    [BurstCompile]
    internal struct AverageSelectJob_<#=TYPE_FULL#><TSelector> : IJob
        where TSelector : struct, IFunc<int, <#=TYPE_FULL#>>
    {
        [ReadOnly]
        public NativeArray<int> Source;

        public ValueFunc<int, <#=TYPE_FULL#>>.Struct<TSelector> Selector;

        public void Execute()
        {
            Blinq.Average(Source, Selector);
        }
    }

    internal class Values_<#=TYPE_FULL#>
    {
        public static IEnumerable Values
        {
            get
            {
                yield return new <#=TYPE_FULL#>[1];
                yield return Linq.ToArray(Linq.Repeat((<#=TYPE_FULL#>)1, 100000));
            }
        }
    }

    internal struct StructIntTo_<#=TYPE_FULL#> : IFunc<int, <#=TYPE_FULL#>>
    {
        public <#=TYPE_FULL#> Invoke(int val) => (<#=TYPE_FULL#>)val;
    }

    internal static readonly ValueFunc<int, <#=TYPE_FULL#>>.Struct<StructIntTo_<#=TYPE_FULL#>> IntTo_<#=TYPE_FULL#> =
        ValueFunc<int, <#=TYPE_FULL#>>.New<StructIntTo_<#=TYPE_FULL#>>();

    [Test, Performance, Category("Performance")]
    public void Blinq_<#=TYPE_FULL#>(
        [ValueSource(typeof(Values_<#=TYPE_FULL#>), nameof(Values_<#=TYPE_FULL#>.Values))] <#=TYPE_FULL#>[] sourceArr
        )
    {
        var src = new NativeArray<<#=TYPE_FULL#>>(sourceArr, Allocator.Persistent);
        MakeMeasurement("Blinq_<#=TYPE_FULL#>", () => new AverageJob_<#=TYPE_FULL#> { Source = src, }.Run()).Run();
        src.Dispose();
    }

    [Test, Performance, Category("Performance")]
    public void Linq_<#=TYPE_FULL#>(
        [ValueSource(typeof(Values_<#=TYPE_FULL#>), nameof(Values_<#=TYPE_FULL#>.Values))] <#=TYPE_FULL#>[] sourceArr
        )
    {
        var src = new NativeArray<<#=TYPE_FULL#>>(sourceArr, Allocator.Persistent);
        MakeMeasurement("Linq_<#=TYPE_FULL#>", () => Linq.Average(src)).Run();
        src.Dispose();
    }

    [Test, Performance, Category("Performance")]
    public void BlinqSelect_<#=TYPE_FULL#>(
        [ValueSource(typeof(SelectValues), nameof(SelectValues.Values))] int[] sourceArr
        )
    {
        var src = new NativeArray<int>(sourceArr, Allocator.Persistent);
        MakeMeasurement("Blinq_<#=TYPE_FULL#>", () => new AverageSelectJob_<#=TYPE_FULL#><StructIntTo_<#=TYPE_FULL#>> { Source = src, Selector = IntTo_<#=TYPE_FULL#> }.Run()).Run();
        src.Dispose();
    }

    [Test, Performance, Category("Performance")]
    public void LinqSelect_<#=TYPE_FULL#>(
        [ValueSource(typeof(SelectValues), nameof(SelectValues.Values))] int[] sourceArr
        )
    {
        var src = new NativeArray<int>(sourceArr, Allocator.Persistent);
        MakeMeasurement("Linq_<#=TYPE_FULL#>", () => Linq.Average(src, IntTo_<#=TYPE_FULL#>.Invoke)).Run();
        src.Dispose();
    }

<#
}
#>
}
